{
    "pipes": [
        {
            "name": "FilterByCategoryPipe",
            "id": "pipe-FilterByCategoryPipe-0c434c939965cdc84f50e21e398d9d108e043610d045f91c4eefbe6be75cea74be1e7cc62cf6909612dd0a9c0ca2912ad79aa471985fd165f3ef6c5f6c141c5f",
            "file": "src/app/shared/pipes/filter-by-category.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "feebacks",
                            "type": "Feedback[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Feedback[]",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "feebacks",
                            "type": "Feedback[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "filterByCategory",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Feedback } from '@core/models';\n\n@Pipe({\n  name: 'filterByCategory',\n  standalone: true,\n})\nexport class FilterByCategoryPipe implements PipeTransform {\n  transform(feebacks: Feedback[], category: string): Feedback[] {\n    if (category === 'all') return feebacks;\n    return feebacks.filter((feedback) => feedback.category === category);\n  }\n}\n"
        },
        {
            "name": "SortByPipe",
            "id": "pipe-SortByPipe-840b6373476cc9164b09e4d80fa8a6ef2f737f43c0a45508c2973ad19955d53d7f6a9888fff6a92e0ac05566e7d6fa2e44132ccfbfe7722ca891201d27571c89",
            "file": "src/app/shared/pipes/sort-by.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "feedbacks",
                            "type": "Feedback[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortBy",
                            "type": "SuggestionSortOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Feedback[]",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "feedbacks",
                            "type": "Feedback[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortBy",
                            "type": "SuggestionSortOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "sortBy",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Feedback, SuggestionSortOption } from '@core/models';\n\n@Pipe({\n  name: 'sortBy',\n  standalone: true,\n})\nexport class SortByPipe implements PipeTransform {\n  transform(feedbacks: Feedback[], sortBy: SuggestionSortOption): Feedback[] {\n    const newFeedbacks = [...feedbacks];\n\n    if (sortBy === 'most upvotes') {\n      newFeedbacks.sort((a, b) => (a.upvotes > b.upvotes ? -1 : 1));\n\n      return [...newFeedbacks];\n    }\n\n    if (sortBy === 'least upvotes') {\n      return [...newFeedbacks.sort((a, b) => (a.upvotes > b.upvotes ? 1 : -1))];\n    }\n\n    if (sortBy === 'most comments') {\n      return [\n        ...newFeedbacks.sort((a, b) =>\n          (a.comments?.length ?? 0) > (b.comments?.length ?? 0) ? -1 : 1\n        ),\n      ];\n    }\n\n    if (sortBy === 'least comments') {\n      return [\n        ...newFeedbacks.sort((a, b) =>\n          (a.comments?.length ?? 0) > (b.comments?.length ?? 0) ? 1 : -1\n        ),\n      ];\n    }\n\n    return newFeedbacks;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-bd67740a0c9b118438168f91269fde7a468d45d335861eaf8a181635218299ab5ded43c2257bc91015b4acc84c75c6e4d9b0bc63c270279904c4107086fc4b0a",
            "file": "src/app/store/app.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap } from '@ngrx/store';\nimport * as fromSuggestions from '../features/suggestions/store/suggestions.reducers';\nimport * as fromFeedback from '../features/feedback/store/feedback.reducers';\nimport * as fromRoadMap from '../features/roadmap/store/roadmap.reducers';\nexport interface AppState {\n  suggestions: fromSuggestions.State;\n  feedbacks: fromFeedback.State;\n  roadmap: fromRoadMap.State;\n}\n\nexport const appReducer: ActionReducerMap<AppState> = {\n  suggestions: fromSuggestions.suggestionsReducer,\n  feedbacks: fromFeedback.feedbackReducer,\n  roadmap: fromRoadMap.roadMapReducer,\n};\n",
            "properties": [
                {
                    "name": "feedbacks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromFeedback.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "roadmap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromRoadMap.State",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "suggestions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromSuggestions.State",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "Reply",
            "id": "interface-Reply-0289958c9daae40c7988a6711b2beaa20f3e5d7f577626228360dd9f2f111e088442919bc1abba1d5434e785183712186bdb46e596f9f0ac55ac744e905be969",
            "file": "src/app/core/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  image: string;\n  name: string;\n  username: string;\n}\n\nexport class Feedback {\n  id: number;\n  title: string;\n  category: string;\n  upvotes: number;\n  status: 'suggestion' | 'planned' | 'in-progress' | 'live';\n  description?: string;\n  comments?: Comment[];\n\n  constructor(id: number) {\n    this.id = id;\n    this.title = '';\n    this.category = '';\n    this.upvotes = 0;\n    this.status = 'suggestion';\n    this.description = '';\n    this.comments = [];\n  }\n}\n\nexport class Comment {\n  id: number;\n  content: string;\n  user!: User;\n  replies?: Reply[];\n\n  constructor(id: number) {\n    this.id = id;\n    this.content = '';\n  }\n}\n\nexport interface Reply {\n  content: string;\n  replyingTo: string;\n  user: User;\n}\n\nexport type SuggestionSortOption =\n  | 'most upvotes'\n  | 'least upvotes'\n  | 'most comments'\n  | 'least comments';\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "replyingTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-1091f0f0e51b4f01323596484f937ad6590c2fd176c689091ca6d5001da30c7a6c7423ca61981f842cc7bb515bccd88c60c4ee6e605ea7932e55700a13334917",
            "file": "src/app/features/feedback/store/feedback.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Feedback } from '@core/models';\nimport { createReducer, on } from '@ngrx/store';\nimport * as FeedbackActions from './feedback.actions';\n\nexport interface State {\n  feedback: Feedback | null;\n}\n\nconst initialState: State = {\n  feedback: null,\n};\n\nexport const feedbackReducer = createReducer(\n  initialState,\n  on(FeedbackActions.storeFeedback, (state, { feedback }) => {\n    console.log('feedback');\n    return { ...state, feedback };\n  })\n);\n",
            "properties": [
                {
                    "name": "feedback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Feedback | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-bca3eb878d94a3503ce05f8da8acc58dbc737df6b58ad961a64035215f75253eba4db92e39cad9382a08fe55fb0261e9fa95fe3c3b6d205a13702f35515566e8-1",
            "file": "src/app/features/roadmap/store/roadmap.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Feedback } from '@core/models';\nimport { createReducer, on } from '@ngrx/store';\nimport * as RoadmapActions from './roadmap.actions';\n\nexport interface State {\n  feedbacks: Feedback[];\n}\n\nconst initialState: State = {\n  feedbacks: [],\n};\n\nexport const roadMapReducer = createReducer(\n  initialState,\n  on(RoadmapActions.storeFeedbacks, (state, { feedbacks }) => {\n    return {\n      ...state,\n      feedbacks,\n    };\n  })\n);\n",
            "properties": [
                {
                    "name": "feedbacks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Feedback[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-18387768dc26908392a8e23c07169b53647b9ebc64f92ff053dce93de88b7cfa3517a97562763bd6b6615c16f1d67fedfd2a011b5ef194546ea79796b76629d0-2",
            "file": "src/app/features/suggestions/store/suggestions.reducers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Feedback, SuggestionSortOption } from '@core/models';\nimport { createReducer, on } from '@ngrx/store';\nimport * as SuggestionActions from './suggestions.actions';\n\nexport interface State {\n  suggestions: Feedback[];\n  toggleSort: boolean;\n  currSortOption: SuggestionSortOption;\n  currCategory: string;\n  statusCounts: { [key in Feedback['status']]: number };\n}\n\nconst initialState: State = {\n  suggestions: [],\n  toggleSort: false,\n  currSortOption: 'most upvotes',\n  currCategory: 'all',\n  statusCounts: {\n    live: 0,\n    suggestion: 0,\n    'in-progress': 0,\n    planned: 0,\n  },\n};\n\nexport const suggestionsReducer = createReducer(\n  initialState,\n  on(SuggestionActions.storeSuggestions, (state, { suggestions }) => {\n    return { ...state, suggestions };\n  }),\n  on(\n    SuggestionActions.setSuggestion,\n    (state, { suggestion: newSuggestion }) => {\n      const suggestions = [...state.suggestions];\n\n      const idx = suggestions.findIndex(\n        (suggestion) => suggestion.id === newSuggestion.id\n      );\n\n      suggestions[idx] = { ...suggestions[idx], ...newSuggestion };\n\n      return { ...state, suggestions };\n    }\n  ),\n  on(SuggestionActions.toggleSort, (state) => ({\n    ...state,\n    toggleSort: !state.toggleSort,\n  })),\n  on(SuggestionActions.setSortOption, (state, { option }) => ({\n    ...state,\n    currSortOption: option,\n  })),\n  on(SuggestionActions.setCategory, (state, { category }) => ({\n    ...state,\n    currCategory: category,\n  })),\n  on(SuggestionActions.storeCategoryCounts, (state, { counts }) => ({\n    ...state,\n    statusCounts: { ...counts },\n  }))\n);\n",
            "properties": [
                {
                    "name": "currCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "currSortOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SuggestionSortOption",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "statusCounts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "suggestions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Feedback[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "toggleSort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        },
        {
            "name": "User",
            "id": "interface-User-0289958c9daae40c7988a6711b2beaa20f3e5d7f577626228360dd9f2f111e088442919bc1abba1d5434e785183712186bdb46e596f9f0ac55ac744e905be969",
            "file": "src/app/core/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  image: string;\n  name: string;\n  username: string;\n}\n\nexport class Feedback {\n  id: number;\n  title: string;\n  category: string;\n  upvotes: number;\n  status: 'suggestion' | 'planned' | 'in-progress' | 'live';\n  description?: string;\n  comments?: Comment[];\n\n  constructor(id: number) {\n    this.id = id;\n    this.title = '';\n    this.category = '';\n    this.upvotes = 0;\n    this.status = 'suggestion';\n    this.description = '';\n    this.comments = [];\n  }\n}\n\nexport class Comment {\n  id: number;\n  content: string;\n  user!: User;\n  replies?: Reply[];\n\n  constructor(id: number) {\n    this.id = id;\n    this.content = '';\n  }\n}\n\nexport interface Reply {\n  content: string;\n  replyingTo: string;\n  user: User;\n}\n\nexport type SuggestionSortOption =\n  | 'most upvotes'\n  | 'least upvotes'\n  | 'most comments'\n  | 'least comments';\n",
            "properties": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AppEffects",
            "id": "injectable-AppEffects-1b5d1a8ac5bf4797962a8dd88691967c795641a7252a57e61cee6b0416856c1876121fe697144dd0a4be59f5dc5162cf220ce53b6a195591d30ee572160d6153",
            "file": "src/app/store/app.effects.ts",
            "properties": [
                {
                    "name": "goBack",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AppActions.goBack),\n        tap(() => window.history.back())\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport * as AppActions from './app.actions';\nimport { tap } from 'rxjs';\n\n@Injectable()\nexport class AppEffects {\n  goBack = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AppActions.goBack),\n        tap(() => window.history.back())\n      ),\n    { dispatch: false }\n  );\n\n  constructor(private actions$: Actions) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CommentService",
            "id": "injectable-CommentService-c1f81bae5536b14a6f985a5fc291eac041cf5b722ebc09f9af7a0ab473cf73e9e6a7cf78c194b03a9b5bb5324f879980d39cd3fd3296b3cc473162fa85df908c",
            "file": "src/app/core/services/comment/comment.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createOneComment",
                    "args": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comment",
                            "type": "Partial<Comment>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Comment>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comment",
                            "type": "Partial<Comment>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteOneComment",
                    "args": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllComments",
                    "args": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Comment[]>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFeedback",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Feedback",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOneComment",
                    "args": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Comment>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateOneComment",
                    "args": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comment",
                            "type": "Partial<Comment>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Comment>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comment",
                            "type": "Partial<Comment>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { db } from '@core/config';\nimport { Comment, Feedback } from '@core/models';\nimport { Observable, of, EMPTY } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CommentService {\n  constructor() {}\n\n  createOneComment(\n    feedbackId: number,\n    comment: Partial<Comment>\n  ): Observable<Comment> {\n    const feedback = this.getFeedback(feedbackId);\n\n    const id = (feedback.comments?.length ?? 0) + 1;\n\n    const newComment = { ...new Comment(id), ...comment };\n\n    feedback.comments?.push(newComment);\n\n    return of(newComment);\n  }\n\n  updateOneComment(\n    feedbackId: number,\n    id: number,\n    comment: Partial<Comment>\n  ): Observable<Comment> {\n    const feedback = this.getFeedback(feedbackId);\n\n    const selected = feedback.comments?.find((comment) => comment.id === id);\n\n    if (!selected) return EMPTY;\n\n    Object.assign(selected, comment);\n\n    return of(selected);\n  }\n\n  getOneComment(feedbackId: number, id: number): Observable<Comment> {\n    const feedback = this.getFeedback(feedbackId);\n\n    const selected = feedback.comments?.find((comment) => comment.id === id);\n\n    if (!selected) return EMPTY;\n\n    return of(selected);\n  }\n\n  getAllComments(feedbackId: number): Observable<Comment[]> {\n    const feedback = this.getFeedback(feedbackId);\n\n    return of(feedback.comments ?? []);\n  }\n\n  deleteOneComment(feedbackId: number, id: number): Observable<void> {\n    const feedback = this.getFeedback(feedbackId);\n\n    const idx =\n      feedback.comments?.findIndex((comment) => comment.id === id) ?? -1;\n\n    if (idx < 0) return EMPTY;\n\n    feedback.comments?.splice(idx, 1);\n\n    return EMPTY;\n  }\n\n  private getFeedback(id: number): Feedback {\n    const feedback = db.productRequests.find((feedback) => feedback.id === id);\n\n    if (!feedback) {\n      throw 'no feedback';\n    }\n\n    return feedback;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "FeedbackEffects",
            "id": "injectable-FeedbackEffects-91dd1110fdc2259bd145023ee82a1155c4159b81b456dc2c858b1a99f8f832507f9097b9a01439754f7afac971ea69edae1c86ecee63b49fb1ccb024be8f64f0",
            "file": "src/app/features/feedback/store/feedback.effects.ts",
            "properties": [
                {
                    "name": "createFeedback",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(FeedbackActions.createFeedback),\n        switchMap(({ feedback }) =>\n          this.feedbackService.createOneFeedback(feedback).pipe(\n            map(() => {\n              return AppActions.goBack();\n            }),\n            catchError(() => {\n              console.log('err');\n              return EMPTY;\n            })\n          )\n        )\n      ),\n    { dispatch: true }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "deleteFeedback",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(FeedbackActions.deleteFeedback),\n      tap((id) => console.log(id)),\n      switchMap(({ id }) =>\n        this.feedbackService.deleteOneFeedback(id).pipe(\n          map(() => AppActions.goBack()),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "fetchFeedback",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(FeedbackActions.fetchFeedback),\n\n      switchMap(({ id }) =>\n        this.feedbackService.getOneFeedback(id).pipe(\n          map((feedback) => FeedbackActions.storeFeedback({ feedback })),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "updateFeedback",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(FeedbackActions.updateFeedback),\n      switchMap(({ id, feedback }) =>\n        this.feedbackService.updateOneFeedback(id, feedback).pipe(\n          map(() => AppActions.goBack()),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Actions, createEffect, ofType } from '@ngrx/effects';\nimport * as FeedbackActions from './feedback.actions';\nimport { FeedbackService } from '@core/services/feedback/feedback.service';\nimport { EMPTY, catchError, delay, map, switchMap, tap } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport * as AppActions from 'src/app/store/app.actions';\n\n@Injectable()\nexport class FeedbackEffects {\n  createFeedback = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(FeedbackActions.createFeedback),\n        switchMap(({ feedback }) =>\n          this.feedbackService.createOneFeedback(feedback).pipe(\n            map(() => {\n              return AppActions.goBack();\n            }),\n            catchError(() => {\n              console.log('err');\n              return EMPTY;\n            })\n          )\n        )\n      ),\n    { dispatch: true }\n  );\n\n  fetchFeedback = createEffect(() =>\n    this.actions$.pipe(\n      ofType(FeedbackActions.fetchFeedback),\n\n      switchMap(({ id }) =>\n        this.feedbackService.getOneFeedback(id).pipe(\n          map((feedback) => FeedbackActions.storeFeedback({ feedback })),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  );\n\n  updateFeedback = createEffect(() =>\n    this.actions$.pipe(\n      ofType(FeedbackActions.updateFeedback),\n      switchMap(({ id, feedback }) =>\n        this.feedbackService.updateOneFeedback(id, feedback).pipe(\n          map(() => AppActions.goBack()),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  );\n\n  deleteFeedback = createEffect(() =>\n    this.actions$.pipe(\n      ofType(FeedbackActions.deleteFeedback),\n      tap((id) => console.log(id)),\n      switchMap(({ id }) =>\n        this.feedbackService.deleteOneFeedback(id).pipe(\n          map(() => AppActions.goBack()),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private feedbackService: FeedbackService\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "feedbackService",
                        "type": "FeedbackService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "feedbackService",
                        "type": "FeedbackService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FeedbackService",
            "id": "injectable-FeedbackService-e5dd0f0de7a2b6e8de70b2d0eb0e0d50de7a4b6cb161e4da0a8e7ded2caf51d7cee9acc4396a81aa038af08396b8683ddbdcc5915876db7bfacb53b9748613fc",
            "file": "src/app/core/services/feedback/feedback.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createOneFeedback",
                    "args": [
                        {
                            "name": "feedback",
                            "type": "Partial<Feedback>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Feedback>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "feedback",
                            "type": "Partial<Feedback>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteOneFeedback",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllCategoryCounts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllFeedbacks",
                    "args": [
                        {
                            "name": "filterBy",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Feedback[]>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterBy",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOneFeedback",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Feedback>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateOneFeedback",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "feedback",
                            "type": "Partial<Feedback>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Feedback>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "feedback",
                            "type": "Partial<Feedback>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnInit } from '@angular/core';\nimport { db } from '@core/config';\nimport { Feedback } from '@core/models';\nimport { EMPTY, Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeedbackService {\n  constructor() {}\n\n  createOneFeedback(feedback: Partial<Feedback>): Observable<Feedback> {\n    const id = db.productRequests.length + 1;\n\n    const newFeedback = { ...new Feedback(id), ...feedback };\n\n    db.productRequests.push({ ...newFeedback });\n\n    return of(newFeedback);\n  }\n\n  updateOneFeedback(\n    id: number,\n    feedback: Partial<Feedback>\n  ): Observable<Feedback> {\n    const selectedIdx = db.productRequests.findIndex(\n      (feedback) => feedback.id === id\n    );\n\n    if (selectedIdx < 0) return EMPTY;\n\n    db.productRequests[selectedIdx] = {\n      ...db.productRequests[selectedIdx],\n      ...feedback,\n    };\n\n    return of(db.productRequests[selectedIdx]);\n  }\n\n  getOneFeedback(id: number): Observable<Feedback> {\n    const selected = db.productRequests.find((feedback) => feedback.id === id);\n\n    if (!selected) return EMPTY;\n\n    return of(selected);\n  }\n\n  getAllFeedbacks(filterBy: Feedback['status']): Observable<Feedback[]> {\n    return of(\n      db.productRequests.filter(\n        (feedback: Feedback) => feedback.status === filterBy\n      )\n    );\n  }\n\n  getAllCategoryCounts(): Observable<{ [key in Feedback['status']]: number }> {\n    const requests = db.productRequests;\n\n    const count = requests.reduce(\n      (acc, curr) => {\n        console.log(curr.status);\n        if (curr.status === 'planned') {\n          acc.planned++;\n        }\n\n        if (curr.status === 'live') {\n          acc.live++;\n        }\n\n        if (curr.status === 'suggestion') {\n          acc.suggestion++;\n        }\n\n        if (curr.status === 'in-progress') {\n          acc['in-progress']++;\n        }\n\n        return acc;\n      },\n      { planned: 0, live: 0, 'in-progress': 0, suggestion: 0 }\n    );\n\n    return of(count);\n  }\n\n  deleteOneFeedback(id: number): Observable<boolean> {\n    const idx = db.productRequests.findIndex((feedback) => feedback.id === id);\n\n    if (idx < 0) return EMPTY;\n\n    db.productRequests.splice(idx, 1);\n\n    return of(true);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "ReplyService",
            "id": "injectable-ReplyService-cbd15d52d384b69c352390990ca6163fe59885e929302394f506a43afe90d739a80c01a8adf45235e079981391fc0979a761339d8fad286bc411c420135b8a77",
            "file": "src/app/core/services/reply/reply.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createOneReply",
                    "args": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "commentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "reply",
                            "type": "Reply",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Reply>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "commentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reply",
                            "type": "Reply",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComment",
                    "args": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Comment",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "feedbackId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { db } from '@core/config';\nimport { Feedback, Reply, Comment } from '@core/models';\nimport { Observable, of, EMPTY } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReplyService {\n  constructor() {}\n\n  createOneReply(\n    feedbackId: number,\n    commentId: number,\n    reply: Reply\n  ): Observable<Reply> {\n    const comment = this.getComment(feedbackId, commentId);\n\n    comment.replies?.push(reply);\n\n    return of(reply);\n  }\n\n  private getComment(feedbackId: number, id: number): Comment {\n    const feedback = db.productRequests.find(\n      (feedback) => feedback.id === feedbackId\n    );\n\n    const comment = feedback?.comments?.find((comment) => comment.id === id);\n\n    if (!comment) {\n      throw 'no feedback';\n    }\n\n    return comment;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "RoadmapEffects",
            "id": "injectable-RoadmapEffects-baa147062d0d80aa9e53f775ba1b754fa3dc5ae65370fa1ada0e68c3e67a189a9c40bcbe59ea4e9487645a16236e4b66ac651005969102f47e23457a93e13041",
            "file": "src/app/features/roadmap/store/roadmap.effects.ts",
            "properties": [
                {
                    "name": "fetchAllFeedbacks",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(FeedbackActions.fetchFeedbacks),\n      switchMap(() =>\n        combineLatest([\n          this.feedbackService.getAllFeedbacks('planned'),\n          this.feedbackService.getAllFeedbacks('live'),\n          this.feedbackService.getAllFeedbacks('in-progress'),\n        ]).pipe(\n          map(([planned, live, progress]) =>\n            FeedbackActions.storeFeedbacks({\n              feedbacks: [...planned, ...live, ...progress],\n            })\n          ),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Actions, createEffect, ofType } from '@ngrx/effects';\nimport * as FeedbackActions from './roadmap.actions';\nimport { EMPTY, catchError, combineLatest, map, switchMap } from 'rxjs';\nimport { Feedback } from '@core/models';\nimport { FeedbackService } from '@core/services/feedback/feedback.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RoadmapEffects {\n  fetchAllFeedbacks = createEffect(() =>\n    this.actions$.pipe(\n      ofType(FeedbackActions.fetchFeedbacks),\n      switchMap(() =>\n        combineLatest([\n          this.feedbackService.getAllFeedbacks('planned'),\n          this.feedbackService.getAllFeedbacks('live'),\n          this.feedbackService.getAllFeedbacks('in-progress'),\n        ]).pipe(\n          map(([planned, live, progress]) =>\n            FeedbackActions.storeFeedbacks({\n              feedbacks: [...planned, ...live, ...progress],\n            })\n          ),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private feedbackService: FeedbackService\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "feedbackService",
                        "type": "FeedbackService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "feedbackService",
                        "type": "FeedbackService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SuggestionsEffects",
            "id": "injectable-SuggestionsEffects-afb04c671e39d44a1dc014ee96faf028e1cdc4d2722716c0b8d0260f0d62b8574edcca32b01618fc03431febd8b351b728ee34f3011b2c823e53726775a8cb70",
            "file": "src/app/features/suggestions/store/suggestions.effects.ts",
            "properties": [
                {
                    "name": "fetchCategoryCounts",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(SuggestionsActions.fetchCategoryCounts),\n      switchMap(() =>\n        this.feedbackService.getAllCategoryCounts().pipe(\n          map((counts) => SuggestionsActions.storeCategoryCounts({ counts })),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "fetchSuggestions",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(SuggestionsActions.fetchSuggestions),\n      switchMap(() =>\n        this.feedbackService.getAllFeedbacks('suggestion').pipe(\n          map((suggestions) =>\n            SuggestionsActions.storeSuggestions({ suggestions })\n          ),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "navToCreateSuggestion",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(SuggestionsActions.startCreateSuggestion),\n        tap(() => this.router.navigate(['/feedback/create']))\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "navToEditSuggestion",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(SuggestionsActions.startEditSuggestion),\n        tap(({ id }) => this.router.navigate(['/feedback', id, 'edit']))\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "navToRoadmap",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(SuggestionsActions.viewRoadmap),\n        tap(() => this.router.navigate(['/roadmap']))\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "navToSuggestionDetails",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(SuggestionsActions.viewSuggestionDetails),\n        tap(({ id }) => this.router.navigate(['/feedback', id]))\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "upvoteSuggestion",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(SuggestionsActions.upvoteSuggestion),\n      switchMap(({ id, votes }) =>\n        this.feedbackService.updateOneFeedback(id, { upvotes: votes }).pipe(\n          map((suggestion) => SuggestionsActions.setSuggestion({ suggestion })),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Actions, createEffect, ofType } from '@ngrx/effects';\nimport * as SuggestionsActions from './suggestions.actions';\nimport { EMPTY, catchError, map, switchMap, tap } from 'rxjs';\nimport { FeedbackService } from '@core/services/feedback/feedback.service';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class SuggestionsEffects {\n  fetchSuggestions = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SuggestionsActions.fetchSuggestions),\n      switchMap(() =>\n        this.feedbackService.getAllFeedbacks('suggestion').pipe(\n          map((suggestions) =>\n            SuggestionsActions.storeSuggestions({ suggestions })\n          ),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  );\n\n  fetchCategoryCounts = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SuggestionsActions.fetchCategoryCounts),\n      switchMap(() =>\n        this.feedbackService.getAllCategoryCounts().pipe(\n          map((counts) => SuggestionsActions.storeCategoryCounts({ counts })),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  );\n\n  upvoteSuggestion = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SuggestionsActions.upvoteSuggestion),\n      switchMap(({ id, votes }) =>\n        this.feedbackService.updateOneFeedback(id, { upvotes: votes }).pipe(\n          map((suggestion) => SuggestionsActions.setSuggestion({ suggestion })),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  );\n\n  navToCreateSuggestion = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(SuggestionsActions.startCreateSuggestion),\n        tap(() => this.router.navigate(['/feedback/create']))\n      ),\n    { dispatch: false }\n  );\n\n  navToEditSuggestion = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(SuggestionsActions.startEditSuggestion),\n        tap(({ id }) => this.router.navigate(['/feedback', id, 'edit']))\n      ),\n    { dispatch: false }\n  );\n\n  navToSuggestionDetails = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(SuggestionsActions.viewSuggestionDetails),\n        tap(({ id }) => this.router.navigate(['/feedback', id]))\n      ),\n    { dispatch: false }\n  );\n\n  navToRoadmap = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(SuggestionsActions.viewRoadmap),\n        tap(() => this.router.navigate(['/roadmap']))\n      ),\n    { dispatch: false }\n  );\n\n  constructor(\n    private actions$: Actions,\n    private feedbackService: FeedbackService,\n    private router: Router\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "feedbackService",
                        "type": "FeedbackService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 82,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "feedbackService",
                        "type": "FeedbackService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-fa345f6ceba7206c416919277d40880d8597378e7f2505a866d336e708bf009e12e8fa6783deb30c69fd7dac83877b64d2d0a9640dbf4c75025022aa135b783b",
            "file": "src/app/core/services/user/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getOneUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { db } from '@core/config';\nimport { User } from '@core/models';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor() {}\n\n  getOneUser(): Observable<User> {\n    return of(db.currentUser);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Comment",
            "id": "class-Comment-0289958c9daae40c7988a6711b2beaa20f3e5d7f577626228360dd9f2f111e088442919bc1abba1d5434e785183712186bdb46e596f9f0ac55ac744e905be969",
            "file": "src/app/core/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface User {\n  image: string;\n  name: string;\n  username: string;\n}\n\nexport class Feedback {\n  id: number;\n  title: string;\n  category: string;\n  upvotes: number;\n  status: 'suggestion' | 'planned' | 'in-progress' | 'live';\n  description?: string;\n  comments?: Comment[];\n\n  constructor(id: number) {\n    this.id = id;\n    this.title = '';\n    this.category = '';\n    this.upvotes = 0;\n    this.status = 'suggestion';\n    this.description = '';\n    this.comments = [];\n  }\n}\n\nexport class Comment {\n  id: number;\n  content: string;\n  user!: User;\n  replies?: Reply[];\n\n  constructor(id: number) {\n    this.id = id;\n    this.content = '';\n  }\n}\n\nexport interface Reply {\n  content: string;\n  replyingTo: string;\n  user: User;\n}\n\nexport type SuggestionSortOption =\n  | 'most upvotes'\n  | 'least upvotes'\n  | 'most comments'\n  | 'least comments';\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "replies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Reply[]",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Feedback",
            "id": "class-Feedback-0289958c9daae40c7988a6711b2beaa20f3e5d7f577626228360dd9f2f111e088442919bc1abba1d5434e785183712186bdb46e596f9f0ac55ac744e905be969",
            "file": "src/app/core/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface User {\n  image: string;\n  name: string;\n  username: string;\n}\n\nexport class Feedback {\n  id: number;\n  title: string;\n  category: string;\n  upvotes: number;\n  status: 'suggestion' | 'planned' | 'in-progress' | 'live';\n  description?: string;\n  comments?: Comment[];\n\n  constructor(id: number) {\n    this.id = id;\n    this.title = '';\n    this.category = '';\n    this.upvotes = 0;\n    this.status = 'suggestion';\n    this.description = '';\n    this.comments = [];\n  }\n}\n\nexport class Comment {\n  id: number;\n  content: string;\n  user!: User;\n  replies?: Reply[];\n\n  constructor(id: number) {\n    this.id = id;\n    this.content = '';\n  }\n}\n\nexport interface Reply {\n  content: string;\n  replyingTo: string;\n  user: User;\n}\n\nexport type SuggestionSortOption =\n  | 'most upvotes'\n  | 'least upvotes'\n  | 'most comments'\n  | 'least comments';\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Comment[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"suggestion\" | \"planned\" | \"in-progress\" | \"live\"",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "upvotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4ca7b80bc6edec0d9b9d8e19ff3b828970b9091057be6c36f30caff197e73b22daacd8e42fc3f1c7928089cca7f21ed501b6c38d770c1e86802a6ea22e2b87d9",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'product-feedback-app-code'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'product-feedback-app-code';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<main>\n  <router-outlet></router-outlet>\n</main>\n"
        },
        {
            "name": "CategoryDropdownComponent",
            "id": "component-CategoryDropdownComponent-17727ff0bc5ad3cf793c401f766b28a245671f802dea80d67bb7b6ef6922eed92bf916116f658e0672a51a6e67a23c99fa6f6d5bc1caad608b8337d4265b0366",
            "file": "src/app/features/feedback/components/category-dropdown/category-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-dropdown",
            "styleUrls": [
                "./category-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./category-dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeSortOption",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "openDropdown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onChangeSortOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "DropdownTabComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DropdownTabComponent } from '@shared/components/dropdown-tab/dropdown-tab.component';\n\n@Component({\n  selector: 'app-category-dropdown',\n  standalone: true,\n  imports: [CommonModule, DropdownTabComponent],\n  templateUrl: './category-dropdown.component.html',\n  styleUrls: ['./category-dropdown.component.scss'],\n})\nexport class CategoryDropdownComponent {\n  @Input() options: string[] = [];\n  @Input() currOption!: string;\n  @Input() isOpen: boolean = false;\n  @Output() openDropdown = new EventEmitter();\n  @Output() changeSortOption = new EventEmitter<string>();\n\n  onChangeSortOption(option: string) {\n    this.changeSortOption.emit(option);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"/src/app/sass/variables\" as v;\n\n.category-option {\n  display: grid;\n  position: relative;\n  align-items: center;\n\n  grid-template-columns: 1fr 1fr;\n\n  p {\n    justify-self: start;\n    text-transform: capitalize;\n  }\n\n  img {\n    justify-self: end;\n  }\n\n  gap: 0.8rem;\n  border: none;\n  cursor: pointer;\n  width: 100%;\n\n  padding: 1.2rem 2.4rem 1.4rem;\n  line-height: normal;\n  font-weight: 400;\n  font-size: 1.5rem;\n  color: v.$clr-grey-dark-1;\n  border-radius: 5px;\n  background: v.$clr-grey-light-3;\n  border: none;\n\n  &:focus,\n  &:focus-visible {\n    outline: none;\n    box-shadow: none;\n    border: 1px solid v.$clr-secondary;\n  }\n\n  p {\n    font-size: 1.4rem;\n    font-weight: 400;\n    line-height: normal;\n  }\n\n  p:nth-child(2) {\n    font-weight: 700;\n    text-transform: capitalize;\n  }\n}\n",
                    "styleUrl": "./category-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n  class=\"category-option paragraph-3\"\n  type=\"button\"\n  (click)=\"$event.stopPropagation(); openDropdown.emit()\"\n>\n  <p>\n    {{ currOption }}\n  </p>\n  <img\n    *ngIf=\"!isOpen\"\n    src=\"assets/shared/icon-arrow-down.svg\"\n    alt=\"Dropdown icon\"\n  />\n  <img\n    *ngIf=\"isOpen\"\n    src=\"assets/shared/icon-arrow-up.svg\"\n    alt=\"Dropdown icon\"\n  />\n\n  <app-dropdown-tab\n    [currOption]=\"currOption\"\n    (changeSortOption)=\"onChangeSortOption($event)\"\n    [options]=\"options\"\n    *ngIf=\"isOpen\"\n  ></app-dropdown-tab>\n</button>\n"
        },
        {
            "name": "CommentsComponent",
            "id": "component-CommentsComponent-3aeb3e8bef332c650bd242170133e2c5853444b1d2b79a348af525661236ce4eac9b9d671e5a988187a875d0ccc8de61d3dd8b9e41b9314a51d4445800548587",
            "file": "src/app/shared/components/comments/comments.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-comments",
            "styleUrls": [
                "./comments.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./comments.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "commentCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-comments',\n  templateUrl: './comments.component.html',\n  styleUrls: ['./comments.component.scss'],\n  standalone: true,\n  imports: [CommonModule],\n})\nexport class CommentsComponent {\n  @Input() commentCount: number = 0;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comments {\n  display: flex;\n  gap: 0.8rem;\n  align-items: center;\n\n  img {\n    width: 1.8rem;\n    height: 1.6rem;\n  }\n\n  & > * {\n    flex-shrink: 0;\n  }\n}\n",
                    "styleUrl": "./comments.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"comments\">\n  <img src=\"/assets/shared/icon-comments.svg\" alt=\"Comment icon\" />\n  <span class=\"paragraph-3 text-grey-dark-1\">\n    {{ commentCount }}\n  </span>\n</div>\n"
        },
        {
            "name": "CreateFeedbackComponent",
            "id": "component-CreateFeedbackComponent-891807c42998dbb4d37b71e0e39570f070f211dcf96ec654a6425d44d39390670ab27a466827b07fb07e207526e7bc95be37de119a8bd2418af8002138cf8124",
            "file": "src/app/features/feedback/pages/create-feedback/create-feedback.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-feedback",
            "styleUrls": [
                "./create-feedback.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-feedback.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "['Feature', 'UI', 'UX', 'Enhancement', 'Bug']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "toggleDropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGoBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CategoryDropdownComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { CategoryDropdownComponent } from '../../components/category-dropdown/category-dropdown.component';\nimport { AppState } from 'src/app/store/app.reducer';\nimport { Store } from '@ngrx/store';\nimport * as FeedbackActions from '../../store/feedback.actions';\nimport * as AppActions from 'src/app/store/app.actions';\nimport { WebComponentsModule } from 'src/libs/web-components.module';\n\n@Component({\n  selector: 'app-create-feedback',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, CategoryDropdownComponent],\n  templateUrl: './create-feedback.component.html',\n  styleUrls: ['./create-feedback.component.scss'],\n})\nexport class CreateFeedbackComponent {\n  categories = ['Feature', 'UI', 'UX', 'Enhancement', 'Bug'];\n  toggleDropdown: boolean = false;\n  form!: FormGroup;\n\n  constructor(private store: Store<AppState>) {}\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      title: new FormControl('', Validators.required),\n      category: new FormControl('Feature', Validators.required),\n      description: new FormControl('', Validators.required),\n    });\n  }\n\n  onGoBack() {\n    this.store.dispatch(AppActions.goBack());\n  }\n\n  onSubmit() {\n    this.store.dispatch(\n      FeedbackActions.createFeedback({ feedback: this.form.value })\n    );\n  }\n\n  onCancel() {\n    this.form.reset({\n      title: '',\n      category: 'Feature',\n      description: '',\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"/src/app/sass/variables\" as v;\n\n.section-new-feedback {\n  min-height: 100vh;\n  padding: 9.2rem 0;\n}\n\n.new-feedback {\n  max-width: 50rem;\n  margin: 0 auto;\n\n  &__back {\n    margin-bottom: 6.8rem;\n  }\n\n  &__icon {\n    position: absolute;\n    top: -5.2rem;\n    transform: translateY(50%);\n  }\n\n  h2 {\n    margin-bottom: 4rem;\n  }\n}\n\n.wrapper {\n  padding: 5.2rem 4.2rem 4rem;\n  position: relative;\n  border-radius: 10px;\n}\n",
                    "styleUrl": "./create-feedback.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<section class=\"section-new-feedback bg-grey-light-3\">\n  <div class=\"new-feedback\">\n    <a href=\"#\" (click)=\"onGoBack()\" class=\"go-back new-feedback__back\">\n      <img src=\"/assets/shared/icon-arrow-left.svg\" alt=\"\" />\n      Go Back\n    </a>\n    <div class=\"wrapper bg-white\">\n      <img\n        class=\"new-feedback__icon\"\n        src=\"/assets/shared/icon-new-feedback.svg\"\n        alt=\"Create feeback icon\"\n      />\n      <h2 class=\"heading-1 text-grey-dark-1\">Create New Feedback</h2>\n      <form class=\"form\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n        <div class=\"form__group\">\n          <label for=\"title\" class=\"form__label\">Feedback Title</label>\n          <p class=\"form__input-description\">\n            Add a short, descriptive headline\n          </p>\n          <input\n            type=\"text\"\n            name=\"title\"\n            id=\"title\"\n            class=\"form__input form__input--text\"\n            formControlName=\"title\"\n            [ngClass]=\"{\n              'form__input--invalid': this.form.get('title')?.invalid\n            }\"\n          />\n\n          <span class=\"form__error-msg\" *ngIf=\"this.form.get('title')?.invalid\">\n            Can't be empty\n          </span>\n        </div>\n        <div class=\"form__group\">\n          <label for=\"title\" class=\"form__label\">Category</label>\n          <p class=\"form__input-description\">\n            Choose a category for your feedback\n          </p>\n          <app-category-dropdown\n            role=\"menu\"\n            id=\"title\"\n            [currOption]=\"this.form.get('category')?.value\"\n            [options]=\"categories\"\n            [isOpen]=\"toggleDropdown\"\n            (openDropdown)=\"this.toggleDropdown = !this.toggleDropdown\"\n            (changeSortOption)=\"this.form.get('category')?.setValue($event)\"\n          ></app-category-dropdown>\n        </div>\n        <div class=\"form__group\">\n          <label for=\"description\" class=\"form__label\">Feedback Detail</label>\n          <p class=\"form__input-description\">\n            Include any specific comments on what should be improved, added,\n            etc.\n          </p>\n          <textarea\n            name=\"description\"\n            id=\"description\"\n            class=\"form__textarea\"\n            formControlName=\"description\"\n            [ngClass]=\"{\n              'form__textarea--invalid': this.form.get('description')?.invalid\n            }\"\n          ></textarea>\n          <span\n            class=\"form__error-msg\"\n            *ngIf=\"this.form.get('description')?.invalid\"\n          >\n            Can't be empty\n          </span>\n        </div>\n        <div class=\"form__btn-group\">\n          <button\n            class=\"form__btn form__btn--right btn btn--secondary\"\n            type=\"button\"\n            (click)=\"onCancel()\"\n          >\n            Cancel\n          </button>\n          <button\n            class=\"from__btn form__btn--right btn btn--primary-1\"\n            [disabled]=\"this.form.invalid\"\n          >\n            Add Feedback\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n</section>\n"
        },
        {
            "name": "DropdownTabComponent",
            "id": "component-DropdownTabComponent-324f63597edc0a6c63c863adfc665427f16e68da041e6a7b04ccc57bb87446c37410f3a52df1d70e65dc7211e44be9ff456ff1df8d99dbf80d5875a3e5e34be3",
            "file": "src/app/shared/components/dropdown-tab/dropdown-tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dropdown-tab",
            "styleUrls": [
                "./dropdown-tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown-tab.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeSortOption",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onChangeSortOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-dropdown-tab',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './dropdown-tab.component.html',\n  styleUrls: ['./dropdown-tab.component.scss'],\n})\nexport class DropdownTabComponent {\n  @Input() options: string[] = [];\n  @Input() currOption!: string;\n  @Output() changeSortOption = new EventEmitter<string>();\n\n  onChangeSortOption(option: string) {\n    this.changeSortOption.emit(option);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"/src/app/sass/variables\" as v;\n\n.options {\n  z-index: 999;\n  min-width: 25rem;\n  box-shadow: 0px 10px 40px -7px rgba(55, 63, 104, 0.35);\n  background-color: black !important;\n  position: absolute;\n  top: 4.2rem;\n  left: 0;\n  border-radius: 10px;\n\n  ul {\n    border-radius: 10px;\n    overflow: hidden;\n  }\n}\n\n.option {\n  button {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    background-color: v.$clr-white;\n    cursor: pointer;\n    padding: 1.2rem 2.4rem;\n    border: none;\n    border-bottom: 1px solid rgba(v.$clr-grey-dark-1, 0.25);\n  }\n\n  &__text {\n    color: v.$clr-grey-light-1;\n    text-transform: capitalize;\n\n    &--selected {\n      color: v.$clr-primary;\n    }\n  }\n}\n",
                    "styleUrl": "./dropdown-tab.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"options bg-white\">\n  <ul>\n    <li *ngFor=\"let option of options; let i = index\" class=\"option\">\n      <button (click)=\"onChangeSortOption(option)\">\n        <span\n          class=\"option__text paragraph-1\"\n          [ngClass]=\"{ 'option__text--selected': option === currOption }\"\n        >\n          {{ option }}\n        </span>\n        <span class=\"option__icon\" *ngIf=\"option === currOption\">\n          <img\n            src=\"/assets/shared/icon-check.svg\"\n            alt=\"Selected suggestion icon\"\n          />\n        </span>\n      </button>\n    </li>\n  </ul>\n</div>\n"
        },
        {
            "name": "EditFeedbackComponent",
            "id": "component-EditFeedbackComponent-4fe043edf51240c047f9fe7d5dc840b6e359f6f8fa6948bd0a34907110f390799ad914ac73f59e47e54bb7ea8b4e061362dac01424e619acf0a4ef53831530c3",
            "file": "src/app/features/feedback/pages/edit-feedback/edit-feedback.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-feedback",
            "styleUrls": [
                "./edit-feedback.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-feedback.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "['feature', 'uI', 'ux', 'enhancement', 'bug']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "status",
                    "defaultValue": "[\n    'in-progress',\n    'live',\n    'planned',\n    'suggestion',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "toggleCategoryDropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "toggleStatusDropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGoBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CategoryDropdownComponent",
                    "type": "component"
                },
                {
                    "name": "WebComponentsModule",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  FormGroup,\n  FormControl,\n  Validators,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store/app.reducer';\nimport * as FeedbackActions from '../../store/feedback.actions';\nimport * as AppActions from 'src/app/store/app.actions';\nimport { CategoryDropdownComponent } from '../../components/category-dropdown/category-dropdown.component';\nimport * as fromFeedback from '../../store/feedback.selectors';\nimport { Subscription, take } from 'rxjs';\nimport { Feedback } from '@core/models';\nimport { ActivatedRoute } from '@angular/router';\nimport { WebComponentsModule } from 'src/libs/web-components.module';\n\n@Component({\n  selector: 'app-edit-feedback',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CategoryDropdownComponent,\n    WebComponentsModule,\n  ],\n  templateUrl: './edit-feedback.component.html',\n  styleUrls: ['./edit-feedback.component.scss'],\n})\nexport class EditFeedbackComponent {\n  categories = ['feature', 'uI', 'ux', 'enhancement', 'bug'];\n  status: Feedback['status'][] = [\n    'in-progress',\n    'live',\n    'planned',\n    'suggestion',\n  ];\n  toggleCategoryDropdown: boolean = false;\n  toggleStatusDropdown: boolean = false;\n  form!: FormGroup;\n  id!: number;\n  sub!: Subscription;\n  title!: string;\n\n  constructor(private store: Store<AppState>, private route: ActivatedRoute) {}\n\n  ngOnInit() {\n    this.id = +(this.route.snapshot.paramMap.get('id') ?? 0);\n\n    this.store.dispatch(\n      FeedbackActions.fetchFeedback({\n        id: this.id,\n      })\n    );\n\n    this.sub = this.store\n      .select(fromFeedback.selectFeedback)\n      .subscribe((feedback) => {\n        this.title = feedback?.title ?? '';\n        this.form = new FormGroup({\n          title: new FormControl(feedback?.title, Validators.required),\n          category: new FormControl(feedback?.category, Validators.required),\n          description: new FormControl(\n            feedback?.description,\n            Validators.required\n          ),\n          status: new FormControl(feedback?.status, Validators.required),\n        });\n      });\n  }\n\n  onGoBack() {\n    this.store.dispatch(AppActions.goBack());\n  }\n\n  onSubmit() {\n    this.store.dispatch(\n      FeedbackActions.updateFeedback({\n        id: this.id,\n        feedback: this.form.value,\n      })\n    );\n  }\n\n  onCancel() {\n    this.store\n      .select(fromFeedback.selectFeedback)\n      .pipe(take(1))\n      .subscribe((feedback) => {\n        this.form.reset({\n          title: feedback?.title,\n          category: feedback?.category,\n          description: feedback?.description,\n          status: feedback?.status,\n        });\n      });\n  }\n\n  onDelete() {\n    this.store.dispatch(FeedbackActions.deleteFeedback({ id: this.id }));\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"/src/app/sass/variables\" as v;\n\n.section-edit-feedback {\n  min-height: 100vh;\n  padding: 9.2rem 0;\n}\n\n.edit-feedback {\n  max-width: 50rem;\n  margin: 0 auto;\n\n  &__back {\n    margin-bottom: 6.8rem;\n  }\n\n  &__icon {\n    position: absolute;\n    top: -5.2rem;\n    transform: translateY(50%);\n  }\n\n  h2 {\n    margin-bottom: 4rem;\n  }\n}\n\n.wrapper {\n  padding: 5.2rem 4.2rem 4rem;\n  position: relative;\n  border-radius: 10px;\n}\n",
                    "styleUrl": "./edit-feedback.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<section class=\"section-edit-feedback bg-grey-light-3\">\n  <div class=\"edit-feedback\">\n    <a href=\"#\" (click)=\"onGoBack()\" class=\"go-back edit-feedback__back\">\n      <img src=\"/assets/shared/icon-arrow-left.svg\" alt=\"\" />\n      Go Back\n    </a>\n    <div class=\"wrapper bg-white\">\n      <img\n        class=\"edit-feedback__icon\"\n        src=\"/assets/shared/icon-edit-feedback.svg\"\n        alt=\"Create feeback icon\"\n      />\n      <h2 class=\"heading-1 text-grey-dark-1\">Editing '{{ this.title }}'</h2>\n      <form class=\"form\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n        <div class=\"form__group\">\n          <label for=\"title\" class=\"form__label\">Feedback Title</label>\n          <p class=\"form__input-description\">\n            Add a short, descriptive headline\n          </p>\n          <input\n            type=\"text\"\n            name=\"title\"\n            id=\"title\"\n            class=\"form__input form__input--text\"\n            formControlName=\"title\"\n            [ngClass]=\"{\n              'form__input--invalid': this.form.get('title')?.invalid\n            }\"\n          />\n\n          <span class=\"form__error-msg\" *ngIf=\"this.form.get('title')?.invalid\">\n            Can't be empty\n          </span>\n        </div>\n        <div class=\"form__group\">\n          <label for=\"category\" class=\"form__label\">Category</label>\n          <p class=\"form__input-description\">\n            Choose a category for your feedback\n          </p>\n          <app-category-dropdown\n            role=\"menu\"\n            id=\"category\"\n            [currOption]=\"this.form.get('category')?.value\"\n            [options]=\"categories\"\n            [isOpen]=\"toggleCategoryDropdown\"\n            (openDropdown)=\"\n              this.toggleCategoryDropdown = !this.toggleCategoryDropdown\n            \"\n            (changeSortOption)=\"this.form.get('category')?.setValue($event)\"\n          ></app-category-dropdown>\n        </div>\n        <div class=\"form__group\">\n          <label for=\"status\" class=\"form__label\">Update Status</label>\n          <p class=\"form__input-description\">Change feedback state</p>\n          <app-category-dropdown\n            role=\"menu\"\n            id=\"status\"\n            [currOption]=\"this.form.get('status')?.value\"\n            [options]=\"status\"\n            [isOpen]=\"toggleStatusDropdown\"\n            (openDropdown)=\"\n              this.toggleStatusDropdown = !this.toggleStatusDropdown\n            \"\n            (changeSortOption)=\"this.form.get('status')?.setValue($event)\"\n          ></app-category-dropdown>\n        </div>\n        <div class=\"form__group\">\n          <label for=\"description\" class=\"form__label\">Feedback Detail</label>\n          <p class=\"form__input-description\">\n            Include any specific comments on what should be improved, added,\n            etc.\n          </p>\n          <textarea\n            name=\"description\"\n            id=\"description\"\n            class=\"form__textarea\"\n            formControlName=\"description\"\n            [ngClass]=\"{\n              'form__textarea--invalid': this.form.get('description')?.invalid\n            }\"\n          ></textarea>\n          <span\n            class=\"form__error-msg\"\n            *ngIf=\"this.form.get('description')?.invalid\"\n          >\n            Can't be empty\n          </span>\n        </div>\n        <div class=\"form__btn-group\">\n          <stencil-button\n            class=\"form__btn form__btn--left\"\n            [type]=\"'danger'\"\n            [text]=\"'Delete'\"\n            (btnClick)=\"onDelete()\"\n          >\n          </stencil-button>\n          <button\n            class=\"form__btn form__btn--right btn btn--secondary\"\n            type=\"button\"\n            (click)=\"onCancel()\"\n          >\n            Cancel\n          </button>\n          <button\n            class=\"from__btn form__btn--right btn btn--primary-1\"\n            [disabled]=\"this.form.invalid\"\n          >\n            Add Feedback\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n</section>\n"
        },
        {
            "name": "FeedbackCardComponent",
            "id": "component-FeedbackCardComponent-f2b714f7b18867b5d580cf2befa97314d2896108929e27dc04cf8e8e8ef7eee0ee42377b608a0ee69683007b058fd9604fc5a31e971550b7c9f542695c87cdc3",
            "file": "src/app/features/roadmap/components/feedback-card/feedback-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-feedback-card",
            "styleUrls": [
                "./feedback-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feedback-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "feedback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Feedback",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "upvoteChange",
                    "defaultValue": "new EventEmitter<{ id: number; votes: number }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onUpvoteChange",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "votes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "votes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CommentsComponent",
                    "type": "component"
                },
                {
                    "name": "UpvoteComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Feedback } from '@core/models';\nimport { CommentsComponent } from '@shared/components/comments/comments.component';\nimport { UpvoteComponent } from '@shared/components/upvote/upvote.component';\n\n@Component({\n  selector: 'app-feedback-card',\n  standalone: true,\n  imports: [CommonModule, CommentsComponent, UpvoteComponent],\n  templateUrl: './feedback-card.component.html',\n  styleUrls: ['./feedback-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FeedbackCardComponent {\n  @Input() feedback!: Feedback;\n  @Output() upvoteChange = new EventEmitter<{ id: number; votes: number }>();\n\n  onUpvoteChange(id: number, votes: number) {\n    this.upvoteChange.emit({ id, votes });\n    // this.store.dispatch(SuggestionActions.upvoteSuggestion({ id, votes }));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"/src/app/sass/variables\" as v;\n\n.card {\n  display: grid;\n  border-radius: 10px;\n  padding: 3.2rem;\n\n  &__status {\n    display: flex;\n    gap: 1.6rem;\n    grid-row: 1;\n    margin-bottom: 0.8rem;\n  }\n\n  &__title {\n    grid-row: 2;\n  }\n\n  &__description {\n    grid-row: 3;\n    margin-bottom: 1.6rem;\n  }\n\n  &__category {\n    grid-row: 4;\n    margin-bottom: 1.6rem;\n  }\n\n  &__comments {\n    grid-row: 5;\n    justify-self: end;\n  }\n\n  &__upvote {\n    grid-row: 5;\n    justify-self: start;\n  }\n}\n\n.border {\n  &--planned {\n    border-top: 5px solid v.$clr-planned;\n  }\n\n  &--live {\n    border-top: 5px solid v.$clr-live;\n  }\n\n  &--progress {\n    border-top: 5px solid v.$clr-progress;\n  }\n}\n",
                    "styleUrl": "./feedback-card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div\n  class=\"card bg-white\"\n  [ngClass]=\"\n{\n    'border--live' : feedback.status === 'live',\n    'border--planned' : feedback.status === 'planned',\n    'border--progress' : feedback.status === 'in-progress',\n}\n\"\n>\n  <div class=\"card__status paragraph-1 text-grey-light-1\">\n    <div\n      class=\"circle\"\n      [ngClass]=\"\n    {\n        'circle--live' : feedback.status === 'live',\n        'circle--planned' : feedback.status === 'planned',\n        'circle--progress' : feedback.status === 'in-progress',\n    }\n    \"\n    ></div>\n    {{ feedback.status }}\n  </div>\n  <h4 class=\"card__title heading-3 text-grey-dark-1\">{{ feedback.title }}</h4>\n  <p class=\"card__description paragraph-1 text-grey-light-1\">\n    {{ feedback.description }}\n  </p>\n  <div class=\"card__category btn-tag\">\n    {{ feedback.category }}\n  </div>\n  <app-comments\n    class=\"card__comments\"\n    [commentCount]=\"feedback.comments?.length ?? 0\"\n  ></app-comments>\n  <app-upvote\n    class=\"card__upvotes\"\n    [upvotes]=\"feedback.upvotes\"\n    (upvoteChange)=\"onUpvoteChange(feedback.id, $event)\"\n  ></app-upvote>\n</div>\n"
        },
        {
            "name": "FeedbackDetailComponent",
            "id": "component-FeedbackDetailComponent-a490274805a5cc1f30adb4dd337d43b87a57c98e84b30e775694f7511f05e5cf955ddfc42cafdc6c2e7cd8317ee810d942da23ac5abd295dd50cb12898c75ecf",
            "file": "src/app/features/feedback/pages/feedback-detail/feedback-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-feedback-detail",
            "styleUrls": [
                "./feedback-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feedback-detail.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-feedback-detail',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './feedback-detail.component.html',\n  styleUrls: ['./feedback-detail.component.scss']\n})\nexport class FeedbackDetailComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./feedback-detail.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>feedback-detail works!</p>\n"
        },
        {
            "name": "MyComponent",
            "id": "component-MyComponent-01fd70313d256724f5c5c596a22dfce23053340a03e2574b71a4441b5975563cd98b8b8d1d86c70bdff23c95962492efb993b73a90be1def0b88548f5085c535",
            "file": "src/libs/stencil-generated/proxies.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [
                "first",
                "last",
                "middle"
            ],
            "outputs": [],
            "providers": [],
            "selector": "my-component",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, NgZone } from '@angular/core';\n\nimport { ProxyCmp, proxyOutputs } from './angular-component-lib/utils';\n\nimport { Components } from '@web-components/dist/components';\n\n\n@ProxyCmp({\n  inputs: ['first', 'last', 'middle']\n})\n@Component({\n  selector: 'my-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n  inputs: ['first', 'last', 'middle'],\n})\nexport class MyComponent {\n  protected el: HTMLElement;\n  constructor(c: ChangeDetectorRef, r: ElementRef, protected z: NgZone) {\n    c.detach();\n    this.el = r.nativeElement;\n  }\n}\n\n\nexport declare interface MyComponent extends Components.MyComponent {}\n\n\n@ProxyCmp({\n  inputs: ['iconPath', 'text', 'type']\n})\n@Component({\n  selector: 'stencil-button',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n  inputs: ['iconPath', 'text', 'type'],\n})\nexport class StencilButton {\n  protected el: HTMLElement;\n  constructor(c: ChangeDetectorRef, r: ElementRef, protected z: NgZone) {\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['btnClick']);\n  }\n}\n\n\nexport declare interface StencilButton extends Components.StencilButton {\n\n  btnClick: EventEmitter<CustomEvent<any>>;\n}\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "c",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "r",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "z",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "c",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "r",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "z",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "RoadmapComponent",
            "id": "component-RoadmapComponent-e24e971840f24c407bf59b3e18b09bbee21a00ec5c9e53e08c60fde79dd816d1c9309ca5adaa42a5f145aabdc68eb1778652cf119d25f93ff9edbba3ef75f274",
            "file": "src/app/features/roadmap/pages/roadmap/roadmap.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-roadmap",
            "styleUrls": [
                "./roadmap.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./roadmap.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inProgresCount$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "inProgress$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Feedback[]>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "live$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Feedback[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "liveCount$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "planned$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Feedback[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "plannedCount$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCreateFeedback",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGoBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "WebComponentsModule",
                    "type": "component"
                },
                {
                    "name": "FeedbackCardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WebComponentsModule } from 'src/libs/web-components.module';\nimport { Observable } from 'rxjs';\nimport { Feedback } from '@core/models';\nimport { FeedbackCardComponent } from '../../components/feedback-card/feedback-card.component';\nimport { AppState } from 'src/app/store/app.reducer';\nimport { Store } from '@ngrx/store';\nimport * as fromRoadmap from '../../store/roadmap.selectors';\nimport * as RoadmapActions from '../../store/roadmap.actions';\n\n@Component({\n  selector: 'app-roadmap',\n  standalone: true,\n  imports: [CommonModule, WebComponentsModule, FeedbackCardComponent],\n  templateUrl: './roadmap.component.html',\n  styleUrls: ['./roadmap.component.scss'],\n})\nexport class RoadmapComponent implements OnInit {\n  planned$!: Observable<Feedback[]>;\n  inProgress$!: Observable<Feedback[]>;\n  live$!: Observable<Feedback[]>;\n  plannedCount$!: Observable<number>;\n  inProgresCount$!: Observable<number>;\n  liveCount$!: Observable<number>;\n\n  constructor(private store: Store<AppState>) {}\n\n  ngOnInit(): void {\n    this.store.dispatch(RoadmapActions.fetchFeedbacks());\n\n    this.planned$ = this.store.select(fromRoadmap.selectPlannedFeedbacks);\n\n    this.inProgress$ = this.store.select(fromRoadmap.selectProgressFeedbacks);\n\n    this.live$ = this.store.select(fromRoadmap.selectLiveFeedbacks);\n\n    this.plannedCount$ = this.store.select(\n      fromRoadmap.selectPlannedFeedbacksCount\n    );\n\n    this.inProgresCount$ = this.store.select(\n      fromRoadmap.selectProgressFeedbacksCount\n    );\n\n    this.liveCount$ = this.store.select(fromRoadmap.selectLiveFeedbacksCount);\n  }\n\n  onGoBack() {}\n\n  onCreateFeedback() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".section-roadmap {\n  padding: 9.4rem 0 12.8rem 0;\n  min-height: 100vh;\n}\n\n.feedbacks {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 3rem;\n\n  &__description {\n    margin-bottom: 3.2rem;\n  }\n\n  &__list {\n    display: grid;\n    gap: 2.4rem;\n  }\n}\n",
                    "styleUrl": "./roadmap.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"section-roadmap bg-grey-light-3\">\n  <div class=\"container roadmap\">\n    <header>\n      <a href=\"#\" (click)=\"onGoBack()\" class=\"go-back edit-feedback__back\">\n        <img src=\"/assets/shared/icon-arrow-left.svg\" alt=\"\" />\n        Go Back\n      </a>\n      <h2>Roadmap</h2>\n      <stencil-button\n        class=\"suggestions__topbar__add\"\n        [type]=\"'primary-1'\"\n        [text]=\"'Add Feedback'\"\n        (btnClick)=\"onCreateFeedback()\"\n        [iconPath]=\"'assets/shared/icon-plus.svg'\"\n      >\n      </stencil-button>\n    </header>\n    <div class=\"feedbacks\">\n      <div class=\"feedbacks__wrapper\">\n        <h3 class=\"feedbacks__title\">Planned ({{ plannedCount$ | async }})</h3>\n        <p class=\"feedbacks__description\">Ideas prioritized for research</p>\n        <ul class=\"feedbacks__list\">\n          <li *ngFor=\"let plannedFeedback of planned$ | async\">\n            <app-feedback-card [feedback]=\"plannedFeedback\"></app-feedback-card>\n          </li>\n        </ul>\n      </div>\n\n      <div class=\"feedbacks__wrapper\">\n        <h3 class=\"feedbacks__title\">\n          In-Progress ({{ inProgresCount$ | async }})\n        </h3>\n        <p class=\"feedbacks__description\">Currently being developed</p>\n        <ul class=\"feedbacks__list\">\n          <li *ngFor=\"let progressFeedback of inProgress$ | async\">\n            <app-feedback-card\n              [feedback]=\"progressFeedback\"\n            ></app-feedback-card>\n          </li>\n        </ul>\n      </div>\n\n      <div class=\"feedbacks__wrapper\">\n        <h3 class=\"feedbacks__title\">Live ({{ liveCount$ | async }})</h3>\n        <p class=\"feedbacks__description\">Released features</p>\n        <ul class=\"feedbacks__list\">\n          <li *ngFor=\"let livedFeedback of live$ | async\">\n            <app-feedback-card [feedback]=\"livedFeedback\"></app-feedback-card>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</section>\n"
        },
        {
            "name": "SortByDropdownComponent",
            "id": "component-SortByDropdownComponent-1ffb47b35e55625ba87a37be4838ab1772c3e536606e8589d33112789488f0a46dcf7c33bdd03b9104ba1f9f509afd85044e8e71db15d0967567f47694618773",
            "file": "src/app/shared/components/sort-by-dropdown/sort-by-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sort-by-dropdown",
            "styleUrls": [
                "./sort-by-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sort-by-dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeSortOption",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "openDropdown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onChangeSortOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "DropdownTabComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DropdownTabComponent } from '../dropdown-tab/dropdown-tab.component';\n\n@Component({\n  selector: 'app-sort-by-dropdown',\n  templateUrl: './sort-by-dropdown.component.html',\n  styleUrls: ['./sort-by-dropdown.component.scss'],\n  standalone: true,\n  imports: [CommonModule, DropdownTabComponent],\n})\nexport class SortByDropdownComponent {\n  @Input() options: string[] = [];\n  @Input() currOption!: string;\n  @Input() isOpen: boolean = false;\n  @Output() openDropdown = new EventEmitter();\n  @Output() changeSortOption = new EventEmitter<string>();\n\n  onChangeSortOption(option: string) {\n    this.changeSortOption.emit(option);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"/src/app/sass/variables\" as v;\n\n.sort-by {\n  display: flex;\n  position: relative;\n  align-items: center;\n  gap: 0.8rem;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n\n  p {\n    font-size: 1.4rem;\n    font-weight: 400;\n    line-height: normal;\n  }\n\n  p:nth-child(2) {\n    font-weight: 700;\n    text-transform: capitalize;\n  }\n}\n",
                    "styleUrl": "./sort-by-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button class=\"sort-by paragraph-3\" (click)=\"openDropdown.emit()\">\n  <p class=\"text-grey-light-2\">Sort by:</p>\n  <p class=\"text-grey-light-2\">\n    {{ currOption }}\n  </p>\n  <img\n    *ngIf=\"!isOpen\"\n    src=\"assets/shared/icon-arrow-down-white.svg\"\n    alt=\"Dropdown icon\"\n  />\n  <img\n    *ngIf=\"isOpen\"\n    src=\"assets/shared/icon-arrow-up-white.svg\"\n    alt=\"Dropdown icon\"\n  />\n\n  <app-dropdown-tab\n    [currOption]=\"currOption\"\n    (changeSortOption)=\"onChangeSortOption($event)\"\n    [options]=\"options\"\n    *ngIf=\"isOpen\"\n  ></app-dropdown-tab>\n</button>\n"
        },
        {
            "name": "StencilButton",
            "id": "component-StencilButton-01fd70313d256724f5c5c596a22dfce23053340a03e2574b71a4441b5975563cd98b8b8d1d86c70bdff23c95962492efb993b73a90be1def0b88548f5085c535",
            "file": "src/libs/stencil-generated/proxies.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [
                "iconPath",
                "text",
                "type"
            ],
            "outputs": [],
            "providers": [],
            "selector": "stencil-button",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, NgZone } from '@angular/core';\n\nimport { ProxyCmp, proxyOutputs } from './angular-component-lib/utils';\n\nimport { Components } from '@web-components/dist/components';\n\n\n@ProxyCmp({\n  inputs: ['first', 'last', 'middle']\n})\n@Component({\n  selector: 'my-component',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n  inputs: ['first', 'last', 'middle'],\n})\nexport class MyComponent {\n  protected el: HTMLElement;\n  constructor(c: ChangeDetectorRef, r: ElementRef, protected z: NgZone) {\n    c.detach();\n    this.el = r.nativeElement;\n  }\n}\n\n\nexport declare interface MyComponent extends Components.MyComponent {}\n\n\n@ProxyCmp({\n  inputs: ['iconPath', 'text', 'type']\n})\n@Component({\n  selector: 'stencil-button',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property\n  inputs: ['iconPath', 'text', 'type'],\n})\nexport class StencilButton {\n  protected el: HTMLElement;\n  constructor(c: ChangeDetectorRef, r: ElementRef, protected z: NgZone) {\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['btnClick']);\n  }\n}\n\n\nexport declare interface StencilButton extends Components.StencilButton {\n\n  btnClick: EventEmitter<CustomEvent<any>>;\n}\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "c",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "r",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "z",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "c",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "r",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "z",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SuggestionsComponent",
            "id": "component-SuggestionsComponent-c2d8a46521c1e1b9acf3a4e010cdd23178cd008fc5fc96057f5cf23c0e8c551364c0d3bb385d4b1cb34ff53aaaa6507f2e7e65158b5732f1f65868b001b99e1e",
            "file": "src/app/features/suggestions/pages/suggestions/suggestions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-suggestions",
            "styleUrls": [
                "./suggestions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./suggestions.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "currentCategory$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "currentSortOption$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<SuggestionSortOption>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "feedbacks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Feedback[]>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "options",
                    "defaultValue": "[\n    'most upvotes',\n    'least upvotes',\n    'most comments',\n    'least comments',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SuggestionSortOption[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "statusCounts$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "toggleSort$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "votes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "votes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeSortOption",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateFeedback",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEdit",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onToggleSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onViewComments",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onViewRoadMap",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "UpvoteComponent",
                    "type": "component"
                },
                {
                    "name": "CommentsComponent",
                    "type": "component"
                },
                {
                    "name": "SortByDropdownComponent",
                    "type": "component"
                },
                {
                    "name": "SortByPipe",
                    "type": "pipe"
                },
                {
                    "name": "FilterByCategoryPipe",
                    "type": "pipe"
                },
                {
                    "name": "WebComponentsModule",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FeedbackService } from '@core/services/feedback/feedback.service';\nimport { Feedback, SuggestionSortOption } from '@core/models';\nimport { UpvoteComponent } from '@shared/components/upvote/upvote.component';\nimport { CommentsComponent } from '@shared/components/comments/comments.component';\nimport { SortByDropdownComponent } from '@shared/components/sort-by-dropdown/sort-by-dropdown.component';\nimport { AppState } from 'src/app/store/app.reducer';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport * as fromSuggestions from '../../store/suggestions.selectors';\nimport * as SuggestionActions from '../../store/suggestions.actions';\nimport { SortByPipe } from '@shared/pipes/sort-by.pipe';\nimport { FilterByCategoryPipe } from '@shared/pipes/filter-by-category.pipe';\nimport { WebComponentsModule } from 'src/libs/web-components.module';\n\n@Component({\n  selector: 'app-suggestions',\n  standalone: true,\n  imports: [\n    CommonModule,\n    UpvoteComponent,\n    CommentsComponent,\n    SortByDropdownComponent,\n    SortByPipe,\n    FilterByCategoryPipe,\n    WebComponentsModule,\n  ],\n  templateUrl: './suggestions.component.html',\n  styleUrls: ['./suggestions.component.scss'],\n})\nexport class SuggestionsComponent {\n  feedbacks$!: Observable<Feedback[]>;\n  toggleSort$!: Observable<boolean>;\n  currentSortOption$!: Observable<SuggestionSortOption>;\n  currentCategory$!: Observable<string>;\n  categories$!: Observable<string[]>;\n  statusCounts$!: Observable<{ [key in Feedback['status']]: number }>;\n\n  options: SuggestionSortOption[] = [\n    'most upvotes',\n    'least upvotes',\n    'most comments',\n    'least comments',\n  ];\n\n  constructor(private store: Store<AppState>) {}\n\n  ngOnInit() {\n    this.store.dispatch(SuggestionActions.fetchSuggestions());\n\n    this.store.dispatch(SuggestionActions.fetchCategoryCounts());\n\n    this.feedbacks$ = this.store.select(fromSuggestions.selectSuggestionList);\n\n    this.toggleSort$ = this.store.select(fromSuggestions.selectToggleSort);\n\n    this.currentSortOption$ = this.store.select(\n      fromSuggestions.selectCurrSortOption\n    );\n\n    this.categories$ = this.store.select(fromSuggestions.selectCategories);\n\n    this.currentCategory$ = this.store.select(\n      fromSuggestions.selectCurrCategory\n    );\n\n    this.statusCounts$ = this.store.select(fromSuggestions.selectStatusCounts);\n  }\n\n  onChange(id: number, votes: number) {\n    this.store.dispatch(SuggestionActions.upvoteSuggestion({ id, votes }));\n  }\n\n  onEdit(event: Event, id: number) {\n    event.preventDefault();\n\n    this.store.dispatch(SuggestionActions.startEditSuggestion({ id }));\n  }\n\n  onViewComments(event: Event, id: number) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.store.dispatch(SuggestionActions.viewSuggestionDetails({ id }));\n  }\n\n  onViewRoadMap(event: Event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.store.dispatch(SuggestionActions.viewRoadmap());\n  }\n\n  onCreateFeedback() {\n    this.store.dispatch(SuggestionActions.startCreateSuggestion());\n  }\n\n  onToggleSort() {\n    this.store.dispatch(SuggestionActions.toggleSort());\n  }\n\n  onChangeSortOption(event: any) {\n    this.store.dispatch(SuggestionActions.setSortOption({ option: event }));\n  }\n\n  onSelectCategory(category: string) {\n    this.store.dispatch(SuggestionActions.setCategory({ category }));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".section-suggestions {\n  padding: 9.4rem 0 12.8rem 0;\n  min-height: 100vh;\n}\n\n.suggestions {\n  display: grid;\n  grid-template-columns: 25rem 1fr;\n  grid-template-rows: 7rem repeat(3, min-content) 1fr;\n  height: 100%;\n  row-gap: 2.4rem;\n  column-gap: 3rem;\n\n  &__header {\n    grid-row: 1 / span 2;\n    grid-column: 1;\n\n    background-image: url(\"/assets/suggestions/desktop/background-header.png\");\n    background-repeat: no-repeat;\n    padding: 6.4rem 2.4rem 2.4rem;\n    border-radius: 10px;\n  }\n\n  &__categories {\n    grid-row: 3;\n    grid-column: 1;\n\n    border-radius: 10px;\n    padding: 2.4rem;\n\n    ul {\n      display: flex;\n      flex-wrap: wrap;\n      column-gap: 0.8rem;\n      row-gap: 1.4rem;\n    }\n  }\n\n  &__roadmaps {\n    grid-row: 4;\n    grid-column: 1;\n\n    border-radius: 10px;\n    padding: 2.4rem;\n\n    h3 {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 2.4rem;\n    }\n\n    ul {\n      display: flex;\n      gap: 0.8rem;\n      flex-direction: column;\n    }\n  }\n\n  &__topbar {\n    grid-row: 1;\n    grid-column: 2;\n\n    padding: 0 2.4rem;\n\n    display: grid;\n    grid-template-columns: repeat(3, max-content) 1fr;\n    align-items: center;\n    border-radius: 10px;\n\n    &__icon {\n      margin-right: 1.6rem;\n    }\n\n    &__count {\n      margin-right: 3.6rem;\n    }\n\n    // &__sort {\n    // }\n\n    &__add {\n      justify-self: end;\n\n      display: flex;\n      align-items: center;\n      gap: 0.4rem;\n    }\n  }\n\n  &__list {\n    grid-row: 2 / span 4;\n    grid-column: 2;\n    align-self: start;\n\n    display: grid;\n    gap: 2rem;\n\n    li {\n      border-radius: 10px;\n    }\n  }\n\n  &__empty {\n    grid-row: 2 / span 4;\n    grid-column: 2;\n    padding: 11rem 0;\n    border-radius: 10px;\n\n    .wrapper {\n      max-width: 50rem;\n      margin: 0 auto;\n\n      display: grid;\n      justify-items: center;\n      text-align: center;\n    }\n\n    &__illustration {\n      margin-bottom: 5.2rem;\n    }\n    h2 {\n      margin-bottom: 1.6rem;\n    }\n    p {\n      margin-bottom: 4.8rem;\n    }\n\n    button {\n      display: flex;\n      align-items: center;\n      gap: 0.4rem;\n    }\n  }\n}\n\n.suggestion {\n  display: grid;\n  padding: 2.8rem 3.2rem;\n  border-radius: 10px;\n\n  grid-template-columns: auto 1fr auto;\n\n  column-gap: 4rem;\n\n  &__upvote {\n    grid-row: 1 / span 2;\n  }\n\n  &__title {\n    grid-row: 1;\n    grid-column: 2;\n    margin-bottom: 0.4rem;\n  }\n\n  &__description {\n    grid-column: 2;\n    margin-bottom: 1.2rem;\n  }\n\n  &__category {\n    grid-column: 2;\n    justify-self: start;\n    pointer-events: none;\n  }\n\n  &__comments {\n    grid-row: 1 / span 3;\n    grid-column: 3;\n\n    text-decoration: none;\n\n    align-self: center;\n  }\n}\n\n.roadmap {\n  display: grid;\n  grid-template-columns: auto 1fr auto;\n  gap: 1.6rem;\n  align-items: center;\n\n  &__count {\n    font-weight: 700;\n  }\n}\n",
                    "styleUrl": "./suggestions.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<section class=\"section-suggestions bg-grey-light-3\">\n  <div class=\"container suggestions\">\n    <header class=\"suggestions__header\">\n      <h1 class=\"heading-2 text-white\">Frontend Mentor</h1>\n      <p class=\"paragraph-2 text-white\">Feedback Board</p>\n    </header>\n\n    <div class=\"suggestions__categories bg-white\">\n      <ul class=\"categories-list\">\n        <li class=\"category\" *ngFor=\"let category of categories$ | async\">\n          <button\n            class=\"btn-tag\"\n            (click)=\"onSelectCategory(category)\"\n            [ngClass]=\"{\n              'btn-tag--selected': category === (currentCategory$ | async)\n            }\"\n          >\n            {{ category }}\n          </button>\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"suggestions__roadmaps bg-white\">\n      <h3 class=\"roadmaps__title\">\n        <span class=\"heading-3 text-grey-dark-2\">Roadmap</span>\n        <a\n          href=\"#\"\n          class=\"roadmaps__view link-secondary\"\n          (click)=\"onViewRoadMap($event)\"\n          >View</a\n        >\n      </h3>\n      <ul class=\"roadmaps-list\">\n        <li class=\"roadmap\">\n          <span class=\"circle circle--planned\">&nbsp;</span>\n          <span class=\"roadmap__type paragraph-1 text-grey-light-1\">\n            Planned</span\n          >\n          <span class=\"roadmap__count paragraph-1 text-grey-light-1\">\n            {{ (this.statusCounts$ | async)?.planned ?? 0 }}\n          </span>\n        </li>\n        <li class=\"roadmap\">\n          <span class=\"circle circle--progress\">&nbsp;</span>\n\n          <span class=\"roadmap__type paragraph-1 text-grey-light-1\"\n            >In-progress</span\n          >\n          <span class=\"roadmap__count paragraph-1 text-grey-light-1\">\n            {{ (this.statusCounts$ | async)?.['in-progress'] }}\n          </span>\n        </li>\n        <li class=\"roadmap\">\n          <span class=\"circle circle--live\">&nbsp;</span>\n          <span class=\"roadmap__type paragraph-1 text-grey-light-1\">Live</span>\n          <span class=\"roadmap__count paragraph-1 text-grey-light-1\">\n            {{ (this.statusCounts$ | async)?.live ?? 0 }}\n          </span>\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"suggestions__topbar bg-grey-dark-1\">\n      <img\n        src=\"assets/suggestions/icon-suggestions.svg\"\n        alt=\"Suggestions icon\"\n        class=\"suggestions__topbar__icon\"\n      />\n\n      <p class=\"suggestions__topbar__count heading-3 text-white\">\n        {{ (feedbacks$ | async)?.length }}\n        Suggestions\n      </p>\n\n      <app-sort-by-dropdown\n        class=\"suggestions__topbar__sort\"\n        [currOption]=\"(currentSortOption$ | async) ?? ''\"\n        [options]=\"options\"\n        [isOpen]=\"!!(toggleSort$ | async)\"\n        (openDropdown)=\"onToggleSort()\"\n        (changeSortOption)=\"onChangeSortOption($event)\"\n      ></app-sort-by-dropdown>\n\n      <!-- <button\n        class=\"suggestions__topbar__add btn btn--primary-1\"\n        (click)=\"onCreateFeedback()\"\n      >\n        <img src=\"assets/shared/icon-plus.svg\" alt=\"Plus icon\" />\n        <span>Add Feedback</span>\n      </button> -->\n\n      <stencil-button\n        class=\"suggestions__topbar__add\"\n        [type]=\"'primary-1'\"\n        [text]=\"'Add Feedback'\"\n        (btnClick)=\"onCreateFeedback()\"\n        [iconPath]=\"'assets/shared/icon-plus.svg'\"\n      >\n      </stencil-button>\n    </div>\n\n    <ul class=\"suggestions__list\" *ngIf=\"!!(feedbacks$ | async)\">\n      <li\n        class=\"bg-white\"\n        *ngFor=\"\n          let feedback of (feedbacks$ | async) ?? []\n            | sortBy : (currentSortOption$ | async) ?? 'most upvotes'\n            | filterByCategory : (currentCategory$ | async) ?? 'all'\n        \"\n      >\n        <a\n          href=\"#\"\n          style=\"text-decoration: none\"\n          class=\"bg-white suggestion\"\n          (click)=\"onEdit($event, feedback.id)\"\n        >\n          <app-upvote\n            class=\"suggestion__upvote\"\n            [upvotes]=\"feedback.upvotes\"\n            (upvoteChange)=\"onChange(feedback.id, $event)\"\n          ></app-upvote>\n\n          <p class=\"suggestion__title heading-3 text-grey-dark-1\">\n            {{ feedback.title }}\n          </p>\n          <p class=\"suggestion__description paragraph-1 text-grey-light-1\">\n            {{ feedback.description }}\n          </p>\n          <div class=\"suggestion__category btn-tag\">\n            {{ feedback.category }}\n          </div>\n\n          <a\n            href=\"#\"\n            (click)=\"onViewComments($event, feedback.id)\"\n            class=\"suggestion__comments\"\n          >\n            <app-comments\n              [commentCount]=\"feedback?.comments?.length ?? 0\"\n            ></app-comments>\n          </a>\n        </a>\n      </li>\n    </ul>\n    <div class=\"suggestions__empty bg-white\" *ngIf=\"!(feedbacks$ | async)\">\n      <div class=\"wrapper\">\n        <img\n          src=\"assets/suggestions/illustration-empty.svg\"\n          alt=\"Empty Suggestions Icon\"\n          class=\"suggestions__empty__illustration\"\n        />\n        <h2 class=\"heading-1 text-grey-dark-2\">There is no feedback yet!</h2>\n        <p class=\"paragraph-1 text-grey-light-1\">\n          Got a suggestion? Found a bug that needs to be squashed? We love\n          hearing about new ideas to improve our app.\n        </p>\n\n        <button class=\"btn btn--primary-1\" (click)=\"onCreateFeedback()\">\n          <img src=\"assets/shared/icon-plus.svg\" alt=\"Plus icon\" />\n          <span>Add Feedback</span>\n        </button>\n      </div>\n    </div>\n  </div>\n</section>\n"
        },
        {
            "name": "UpvoteComponent",
            "id": "component-UpvoteComponent-64298f5cb23570468283bfc15414e67249289b0bb497f954e7e1b091f82113718f048aa5cf556dd57e4decd58602c56d0304059aa8c148ef3e8278b9fea5bed6",
            "file": "src/app/shared/components/upvote/upvote.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-upvote",
            "styleUrls": [
                "./upvote.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./upvote.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "upvotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "upvoteChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "upvoteControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpvote",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-upvote',\n  templateUrl: './upvote.component.html',\n  styleUrls: ['./upvote.component.scss'],\n  imports: [ReactiveFormsModule, CommonModule],\n  standalone: true,\n})\nexport class UpvoteComponent {\n  @Input() upvotes!: number;\n  @Output() upvoteChange = new EventEmitter<number>();\n\n  subscription!: Subscription;\n  upvoteControl!: FormControl;\n\n  ngOnInit() {\n    this.upvoteControl = new FormControl(this.upvotes);\n\n    this.subscription = this.upvoteControl.valueChanges.subscribe((value) => {\n      this.upvoteChange.emit(value);\n    });\n  }\n\n  onUpvote(event: Event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const value = this.upvoteControl.value + 1;\n\n    this.upvoteControl.setValue(value);\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".upvote {\n  padding: 1.4rem 1.1rem 0.8rem;\n  width: 5rem;\n  border-radius: 10px;\n  border: none;\n  font-size: 1.3rem;\n  font-weight: 700;\n  line-height: normal;\n  letter-spacing: -0.181px;\n  cursor: pointer;\n\n  display: flex;\n  flex-direction: column;\n  gap: 0.8rem;\n  align-items: center;\n}\n",
                    "styleUrl": "./upvote.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button class=\"upvote bg-grey-light-2\" (click)=\"onUpvote($event)\">\n  <img src=\"assets/shared/icon-arrow-up.svg\" alt=\"Upvote icon\" />\n  <span class=\"paragraph-3 text-grey-dark-2\">\n    {{ this.upvoteControl.value }}\n  </span>\n</button>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-8c0868064d0a62a6906e00d5f20a620e161e3402c959ef79498563431ef34f74eddf77bb911eee42035429f95da7549b4692da5b06d4bbfdbf08523d068e14f3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { appReducer } from './store/app.reducer';\nimport { SuggestionsEffects } from './features/suggestions/store/suggestions.effects';\nimport { FeedbackEffects } from './features/feedback/store/feedback.effects';\nimport { AppEffects } from './store/app.effects';\nimport { RoadmapEffects } from './features/roadmap/store/roadmap.effects';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    StoreModule.forRoot(appReducer),\n    EffectsModule.forRoot([\n      SuggestionsEffects,\n      FeedbackEffects,\n      RoadmapEffects,\n      AppEffects,\n    ]),\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-38600f9b11478fed826a1de4ba053d2784bc5d72f3c9448b213114d35adaa3fff66e3b373a47cd35ba141d9ae68fc10688cc5a8e1b936142a1362ffc9c6f4afb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: 'suggestions',\n  },\n  {\n    path: 'suggestions',\n    loadComponent: () =>\n      \"import(\\\n        './features/suggestions/pages/suggestions/suggestions.component'\\\n      ).then((comp) => comp.SuggestionsComponent)\",\n  },\n  {\n    path: 'roadmap',\n    loadComponent: () =>\n      \"import('./features/roadmap/pages/roadmap/roadmap.component').then(\\\n        (comp) => comp.RoadmapComponent\\\n      )\",\n  },\n  {\n    path: 'feedback',\n    loadChildren: () =>\n      \"import('./features/feedback/feedback-routing').then(\\\n        (mod) => mod.FEEDBACK_ROUTES\\\n      )\",\n  },\n  {\n    path: '**',\n    redirectTo: 'suggestions',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WebComponentsModule",
            "id": "module-WebComponentsModule-0fa22b031ee8c4c188e89ae99a80bd89f96fdab89c2b2059baba40a0b9168e47868914582a4aab0d6259ca595765be97416377eb14f60b8aeee1293953f39b54",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/libs/web-components.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { defineCustomElements } from 'packages/stencil-library/loader';\n\nimport { MyComponent, StencilButton } from './stencil-generated/proxies';\n\ndefineCustomElements(window);\n\n@NgModule({\n  imports: [],\n  declarations: [MyComponent, StencilButton],\n  exports: [MyComponent, StencilButton],\n})\nexport class WebComponentsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MyComponent"
                        },
                        {
                            "name": "StencilButton"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MyComponent"
                        },
                        {
                            "name": "StencilButton"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  openDropdown: action('openDropdown'),\n  changeSortOption: action('changeSortOption'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/upvote/upvote.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  upvoteChange: action('upvoteChange'),\n}"
            },
            {
                "name": "appReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\n  suggestions: fromSuggestions.suggestionsReducer,\n  feedbacks: fromFeedback.feedbackReducer,\n  roadmap: fromRoadMap.roadMapReducer,\n}"
            },
            {
                "name": "BigNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/comments/comments.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    commentCount: 300000,\n  },\n}"
            },
            {
                "name": "Closed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: [\n      'Most upvotes',\n      'Least upvotes',\n      'Most comments',\n      'Least comments',\n    ],\n    currOption: 'Most upvotes',\n    isOpen: false,\n  },\n}"
            },
            {
                "name": "Closed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/upvote/upvote.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    upvotes: 200,\n  },\n}"
            },
            {
                "name": "createFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/feedback/store/feedback.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Feeback] Create feedback',\n  props<{ feedback: Partial<Feedback> }>()\n)"
            },
            {
                "name": "db",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{ ...data } as {\n  currentUser: User;\n  productRequests: Feedback[];\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/comments/comments.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    commentCount: 0,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: [],\n    currOption: '',\n    isOpen: false,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/upvote/upvote.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    upvotes: 0,\n  },\n}"
            },
            {
                "name": "defineCustomElement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(tagName: string, customElement: any) => {\n  if (customElement !== undefined && typeof customElements !== 'undefined' && !customElements.get(tagName)) {\n    customElements.define(tagName, customElement);\n  }\n}"
            },
            {
                "name": "deleteFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/feedback/store/feedback.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Feedback] Delete Feedback',\n  props<{ id: number }>()\n)"
            },
            {
                "name": "FEEDBACK_ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/feedback/feedback-routing.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route[]",
                "defaultValue": "[\n  {\n    path: 'create',\n    loadComponent: () =>\n      import('./pages/create-feedback/create-feedback.component').then(\n        (comp) => comp.CreateFeedbackComponent\n      ),\n    pathMatch: 'full',\n  },\n  {\n    path: ':id',\n    loadComponent: () =>\n      import('./pages/feedback-detail/feedback-detail.component').then(\n        (comp) => comp.FeedbackDetailComponent\n      ),\n  },\n  {\n    path: ':id/edit',\n    loadComponent: () =>\n      import('./pages/edit-feedback/edit-feedback.component').then(\n        (comp) => comp.EditFeedbackComponent\n      ),\n  },\n]"
            },
            {
                "name": "feedbackReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/feedback/store/feedback.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(FeedbackActions.storeFeedback, (state, { feedback }) => {\n    console.log('feedback');\n    return { ...state, feedback };\n  })\n)"
            },
            {
                "name": "fetchCategoryCounts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Suggestions] Fetch Category Counts'\n)"
            },
            {
                "name": "fetchFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/feedback/store/feedback.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Feeback] Fetch feedback',\n  props<{ id: number }>()\n)"
            },
            {
                "name": "fetchFeedbacks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/roadmap/store/roadmap.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Roadmap] Fetch feedbacks')"
            },
            {
                "name": "fetchSuggestions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Suggestions] Fetch Suggestions')"
            },
            {
                "name": "goBack",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[App] Go back')"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/feedback/store/feedback.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  feedback: null,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/roadmap/store/roadmap.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  feedbacks: [],\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  suggestions: [],\n  toggleSort: false,\n  currSortOption: 'most upvotes',\n  currCategory: 'all',\n  statusCounts: {\n    live: 0,\n    suggestion: 0,\n    'in-progress': 0,\n    planned: 0,\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/comments/comments.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CommentsComponent>",
                "defaultValue": "{\n  title: 'Comment',\n  component: CommentsComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: CommentsComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SortByDropdownComponent>",
                "defaultValue": "{\n  title: 'SortByDropdown',\n  component: SortByDropdownComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: SortByDropdownComponent) => ({\n    props: {\n      ...args,\n      openDropdown: actionsData.openDropdown,\n      changeSortOption: actionsData.changeSortOption,\n    },\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/upvote/upvote.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<UpvoteComponent>",
                "defaultValue": "{\n  title: 'Upvote',\n  component: UpvoteComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: UpvoteComponent) => ({\n    props: {\n      ...args,\n      upvoteChange: actionsData.upvoteChange,\n    },\n  }),\n}"
            },
            {
                "name": "Normal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/comments/comments.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    commentCount: 100,\n  },\n}"
            },
            {
                "name": "Normal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/upvote/upvote.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    upvotes: 100,\n  },\n}"
            },
            {
                "name": "Open",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: [\n      'Most upvotes',\n      'Least upvotes',\n      'Most comments',\n      'Least comments',\n    ],\n    currOption: 'Most upvotes',\n    isOpen: true,\n  },\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "proxyInputs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(Cmp: any, inputs: string[]) => {\n  const Prototype = Cmp.prototype;\n  inputs.forEach((item) => {\n    Object.defineProperty(Prototype, item, {\n      get() {\n        return this.el[item];\n      },\n      set(val: any) {\n        this.z.runOutsideAngular(() => (this.el[item] = val));\n      },\n    });\n  });\n}"
            },
            {
                "name": "proxyMethods",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(Cmp: any, methods: string[]) => {\n  const Prototype = Cmp.prototype;\n  methods.forEach((methodName) => {\n    Prototype[methodName] = function () {\n      const args = arguments;\n      return this.z.runOutsideAngular(() => this.el[methodName].apply(this.el, args));\n    };\n  });\n}"
            },
            {
                "name": "proxyOutputs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(instance: any, el: any, events: string[]) => {\n  events.forEach((eventName) => (instance[eventName] = fromEvent(el, eventName)));\n}"
            },
            {
                "name": "roadMapReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/roadmap/store/roadmap.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(RoadmapActions.storeFeedbacks, (state, { feedbacks }) => {\n    return {\n      ...state,\n      feedbacks,\n    };\n  })\n)"
            },
            {
                "name": "selectCategories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSuggestionList,\n  (suggestions) => [\n    ...new Set(\n      suggestions.reduce(\n        (acc, curr) => {\n          acc.push(curr.category);\n          return acc;\n        },\n        ['all']\n      )\n    ),\n  ]\n)"
            },
            {
                "name": "selectCurrCategory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSuggestions,\n  (state) => state.currCategory\n)"
            },
            {
                "name": "selectCurrSortOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSuggestions,\n  (state) => state.currSortOption\n)"
            },
            {
                "name": "selectFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/feedback/store/feedback.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectFeedbackState,\n  (state) => state.feedback\n)"
            },
            {
                "name": "selectFeedbacks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectRoadmapState,\n  (state) => state.feedbacks\n)"
            },
            {
                "name": "selectFeedbackState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/feedback/store/feedback.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: AppState) => state.feedbacks"
            },
            {
                "name": "selectLiveFeedbacks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectFeedbacks, (state) =>\n  state.filter((feedback) => feedback.status === 'live')\n)"
            },
            {
                "name": "selectLiveFeedbacksCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectLiveFeedbacks,\n  (state) => state.length\n)"
            },
            {
                "name": "selectPlannedFeedbacks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectFeedbacks, (state) =>\n  state.filter((feedback) => feedback.status === 'planned')\n)"
            },
            {
                "name": "selectPlannedFeedbacksCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectPlannedFeedbacks,\n  (state) => state.length\n)"
            },
            {
                "name": "selectProgressFeedbacks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectFeedbacks,\n  (state) => state.filter((feedback) => feedback.status === 'in-progress')\n)"
            },
            {
                "name": "selectProgressFeedbacksCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectProgressFeedbacks,\n  (state) => state.length\n)"
            },
            {
                "name": "selectRoadmapState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: AppState) => state.roadmap"
            },
            {
                "name": "selectStatusCounts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSuggestions,\n  (state) => state.statusCounts\n)"
            },
            {
                "name": "selectSuggestionList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSuggestions,\n  (state) => state.suggestions\n)"
            },
            {
                "name": "selectSuggestions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: fromApp.AppState) => state.suggestions"
            },
            {
                "name": "selectToggleSort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSuggestions,\n  (state) => state.toggleSort\n)"
            },
            {
                "name": "setCategory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Suggestions] UI Set Category',\n  props<{ category: string }>()\n)"
            },
            {
                "name": "setSortOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Suggestions] UI Set Sort Option',\n  props<{ option: SuggestionSortOption }>()\n)"
            },
            {
                "name": "setSuggestion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Suggestions] Set Suggestion',\n  props<{ suggestion: Feedback }>()\n)"
            },
            {
                "name": "startCreateSuggestion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Suggestions] Start Create Suggestion'\n)"
            },
            {
                "name": "startEditSuggestion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Suggestions] Start Edit Suggestion',\n  props<{ id: number }>()\n)"
            },
            {
                "name": "storeCategoryCounts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Suggestions] Store Categoru Counts',\n  props<{ counts: { [key in Feedback['status']]: number } }>()\n)"
            },
            {
                "name": "storeFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/feedback/store/feedback.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Feedback] Store feedback',\n  props<{ feedback: Feedback }>()\n)"
            },
            {
                "name": "storeFeedbacks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/roadmap/store/roadmap.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Roadmap] Store feedbacks',\n  props<{\n    feedbacks: Feedback[];\n  }>()\n)"
            },
            {
                "name": "storeSuggestions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Suggestions] Store Suggestions',\n  props<{ suggestions: Feedback[] }>()\n)"
            },
            {
                "name": "suggestionsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(SuggestionActions.storeSuggestions, (state, { suggestions }) => {\n    return { ...state, suggestions };\n  }),\n  on(\n    SuggestionActions.setSuggestion,\n    (state, { suggestion: newSuggestion }) => {\n      const suggestions = [...state.suggestions];\n\n      const idx = suggestions.findIndex(\n        (suggestion) => suggestion.id === newSuggestion.id\n      );\n\n      suggestions[idx] = { ...suggestions[idx], ...newSuggestion };\n\n      return { ...state, suggestions };\n    }\n  ),\n  on(SuggestionActions.toggleSort, (state) => ({\n    ...state,\n    toggleSort: !state.toggleSort,\n  })),\n  on(SuggestionActions.setSortOption, (state, { option }) => ({\n    ...state,\n    currSortOption: option,\n  })),\n  on(SuggestionActions.setCategory, (state, { category }) => ({\n    ...state,\n    currCategory: category,\n  })),\n  on(SuggestionActions.storeCategoryCounts, (state, { counts }) => ({\n    ...state,\n    statusCounts: { ...counts },\n  }))\n)"
            },
            {
                "name": "toggleSort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Suggestions] UI Toggle Sort')"
            },
            {
                "name": "updateFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/feedback/store/feedback.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Feedback] Update Feedback',\n  props<{ id: number; feedback: Partial<Feedback> }>()\n)"
            },
            {
                "name": "upvoteSuggestion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Suggestions] Upvote Suggestion',\n  props<{ id: number; votes: number }>()\n)"
            },
            {
                "name": "viewRoadmap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Suggestions] View Roadmap')"
            },
            {
                "name": "viewSuggestionDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Suggestions] View Suggestion Details',\n  props<{ id: number }>()\n)"
            }
        ],
        "functions": [
            {
                "name": "ProxyCmp",
                "file": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "opts",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "opts",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CommentsComponent>",
                "file": "src/app/shared/components/comments/comments.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SortByDropdownComponent>",
                "file": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<UpvoteComponent>",
                "file": "src/app/shared/components/upvote/upvote.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "SuggestionSortOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"most upvotes\" | \"least upvotes\" | \"most comments\" | \"least comments\"",
                "file": "src/app/core/models.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  openDropdown: action('openDropdown'),\n  changeSortOption: action('changeSortOption'),\n}"
                },
                {
                    "name": "Closed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: [\n      'Most upvotes',\n      'Least upvotes',\n      'Most comments',\n      'Least comments',\n    ],\n    currOption: 'Most upvotes',\n    isOpen: false,\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: [],\n    currOption: '',\n    isOpen: false,\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SortByDropdownComponent>",
                    "defaultValue": "{\n  title: 'SortByDropdown',\n  component: SortByDropdownComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: SortByDropdownComponent) => ({\n    props: {\n      ...args,\n      openDropdown: actionsData.openDropdown,\n      changeSortOption: actionsData.changeSortOption,\n    },\n  }),\n}"
                },
                {
                    "name": "Open",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: [\n      'Most upvotes',\n      'Least upvotes',\n      'Most comments',\n      'Least comments',\n    ],\n    currOption: 'Most upvotes',\n    isOpen: true,\n  },\n}"
                }
            ],
            "src/app/shared/components/upvote/upvote.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/upvote/upvote.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  upvoteChange: action('upvoteChange'),\n}"
                },
                {
                    "name": "Closed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/upvote/upvote.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    upvotes: 200,\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/upvote/upvote.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    upvotes: 0,\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/upvote/upvote.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<UpvoteComponent>",
                    "defaultValue": "{\n  title: 'Upvote',\n  component: UpvoteComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: UpvoteComponent) => ({\n    props: {\n      ...args,\n      upvoteChange: actionsData.upvoteChange,\n    },\n  }),\n}"
                },
                {
                    "name": "Normal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/upvote/upvote.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    upvotes: 100,\n  },\n}"
                }
            ],
            "src/app/store/app.reducer.ts": [
                {
                    "name": "appReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\n  suggestions: fromSuggestions.suggestionsReducer,\n  feedbacks: fromFeedback.feedbackReducer,\n  roadmap: fromRoadMap.roadMapReducer,\n}"
                }
            ],
            "src/app/shared/components/comments/comments.stories.ts": [
                {
                    "name": "BigNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/comments/comments.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    commentCount: 300000,\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/comments/comments.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    commentCount: 0,\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/comments/comments.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CommentsComponent>",
                    "defaultValue": "{\n  title: 'Comment',\n  component: CommentsComponent,\n  excludeStories: /.*Data$/,\n  tags: ['autodocs'],\n  render: (args: CommentsComponent) => ({\n    props: {\n      ...args,\n    },\n  }),\n}"
                },
                {
                    "name": "Normal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/comments/comments.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    commentCount: 100,\n  },\n}"
                }
            ],
            "src/app/features/feedback/store/feedback.actions.ts": [
                {
                    "name": "createFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/feedback/store/feedback.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Feeback] Create feedback',\n  props<{ feedback: Partial<Feedback> }>()\n)"
                },
                {
                    "name": "deleteFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/feedback/store/feedback.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Feedback] Delete Feedback',\n  props<{ id: number }>()\n)"
                },
                {
                    "name": "fetchFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/feedback/store/feedback.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Feeback] Fetch feedback',\n  props<{ id: number }>()\n)"
                },
                {
                    "name": "storeFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/feedback/store/feedback.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Feedback] Store feedback',\n  props<{ feedback: Feedback }>()\n)"
                },
                {
                    "name": "updateFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/feedback/store/feedback.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Feedback] Update Feedback',\n  props<{ id: number; feedback: Partial<Feedback> }>()\n)"
                }
            ],
            "src/app/core/config.ts": [
                {
                    "name": "db",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{ ...data } as {\n  currentUser: User;\n  productRequests: Feedback[];\n}"
                }
            ],
            "src/libs/stencil-generated/angular-component-lib/utils.ts": [
                {
                    "name": "defineCustomElement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(tagName: string, customElement: any) => {\n  if (customElement !== undefined && typeof customElements !== 'undefined' && !customElements.get(tagName)) {\n    customElements.define(tagName, customElement);\n  }\n}"
                },
                {
                    "name": "proxyInputs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(Cmp: any, inputs: string[]) => {\n  const Prototype = Cmp.prototype;\n  inputs.forEach((item) => {\n    Object.defineProperty(Prototype, item, {\n      get() {\n        return this.el[item];\n      },\n      set(val: any) {\n        this.z.runOutsideAngular(() => (this.el[item] = val));\n      },\n    });\n  });\n}"
                },
                {
                    "name": "proxyMethods",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(Cmp: any, methods: string[]) => {\n  const Prototype = Cmp.prototype;\n  methods.forEach((methodName) => {\n    Prototype[methodName] = function () {\n      const args = arguments;\n      return this.z.runOutsideAngular(() => this.el[methodName].apply(this.el, args));\n    };\n  });\n}"
                },
                {
                    "name": "proxyOutputs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(instance: any, el: any, events: string[]) => {\n  events.forEach((eventName) => (instance[eventName] = fromEvent(el, eventName)));\n}"
                }
            ],
            "src/app/features/feedback/feedback-routing.ts": [
                {
                    "name": "FEEDBACK_ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/feedback/feedback-routing.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route[]",
                    "defaultValue": "[\n  {\n    path: 'create',\n    loadComponent: () =>\n      import('./pages/create-feedback/create-feedback.component').then(\n        (comp) => comp.CreateFeedbackComponent\n      ),\n    pathMatch: 'full',\n  },\n  {\n    path: ':id',\n    loadComponent: () =>\n      import('./pages/feedback-detail/feedback-detail.component').then(\n        (comp) => comp.FeedbackDetailComponent\n      ),\n  },\n  {\n    path: ':id/edit',\n    loadComponent: () =>\n      import('./pages/edit-feedback/edit-feedback.component').then(\n        (comp) => comp.EditFeedbackComponent\n      ),\n  },\n]"
                }
            ],
            "src/app/features/feedback/store/feedback.reducers.ts": [
                {
                    "name": "feedbackReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/feedback/store/feedback.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(FeedbackActions.storeFeedback, (state, { feedback }) => {\n    console.log('feedback');\n    return { ...state, feedback };\n  })\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/feedback/store/feedback.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  feedback: null,\n}"
                }
            ],
            "src/app/features/suggestions/store/suggestions.actions.ts": [
                {
                    "name": "fetchCategoryCounts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Suggestions] Fetch Category Counts'\n)"
                },
                {
                    "name": "fetchSuggestions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Suggestions] Fetch Suggestions')"
                },
                {
                    "name": "setCategory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Suggestions] UI Set Category',\n  props<{ category: string }>()\n)"
                },
                {
                    "name": "setSortOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Suggestions] UI Set Sort Option',\n  props<{ option: SuggestionSortOption }>()\n)"
                },
                {
                    "name": "setSuggestion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Suggestions] Set Suggestion',\n  props<{ suggestion: Feedback }>()\n)"
                },
                {
                    "name": "startCreateSuggestion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Suggestions] Start Create Suggestion'\n)"
                },
                {
                    "name": "startEditSuggestion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Suggestions] Start Edit Suggestion',\n  props<{ id: number }>()\n)"
                },
                {
                    "name": "storeCategoryCounts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Suggestions] Store Categoru Counts',\n  props<{ counts: { [key in Feedback['status']]: number } }>()\n)"
                },
                {
                    "name": "storeSuggestions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Suggestions] Store Suggestions',\n  props<{ suggestions: Feedback[] }>()\n)"
                },
                {
                    "name": "toggleSort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Suggestions] UI Toggle Sort')"
                },
                {
                    "name": "upvoteSuggestion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Suggestions] Upvote Suggestion',\n  props<{ id: number; votes: number }>()\n)"
                },
                {
                    "name": "viewRoadmap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Suggestions] View Roadmap')"
                },
                {
                    "name": "viewSuggestionDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Suggestions] View Suggestion Details',\n  props<{ id: number }>()\n)"
                }
            ],
            "src/app/features/roadmap/store/roadmap.actions.ts": [
                {
                    "name": "fetchFeedbacks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/roadmap/store/roadmap.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Roadmap] Fetch feedbacks')"
                },
                {
                    "name": "storeFeedbacks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/roadmap/store/roadmap.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Roadmap] Store feedbacks',\n  props<{\n    feedbacks: Feedback[];\n  }>()\n)"
                }
            ],
            "src/app/store/app.actions.ts": [
                {
                    "name": "goBack",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[App] Go back')"
                }
            ],
            "src/app/features/roadmap/store/roadmap.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/roadmap/store/roadmap.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  feedbacks: [],\n}"
                },
                {
                    "name": "roadMapReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/roadmap/store/roadmap.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(RoadmapActions.storeFeedbacks, (state, { feedbacks }) => {\n    return {\n      ...state,\n      feedbacks,\n    };\n  })\n)"
                }
            ],
            "src/app/features/suggestions/store/suggestions.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  suggestions: [],\n  toggleSort: false,\n  currSortOption: 'most upvotes',\n  currCategory: 'all',\n  statusCounts: {\n    live: 0,\n    suggestion: 0,\n    'in-progress': 0,\n    planned: 0,\n  },\n}"
                },
                {
                    "name": "suggestionsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(SuggestionActions.storeSuggestions, (state, { suggestions }) => {\n    return { ...state, suggestions };\n  }),\n  on(\n    SuggestionActions.setSuggestion,\n    (state, { suggestion: newSuggestion }) => {\n      const suggestions = [...state.suggestions];\n\n      const idx = suggestions.findIndex(\n        (suggestion) => suggestion.id === newSuggestion.id\n      );\n\n      suggestions[idx] = { ...suggestions[idx], ...newSuggestion };\n\n      return { ...state, suggestions };\n    }\n  ),\n  on(SuggestionActions.toggleSort, (state) => ({\n    ...state,\n    toggleSort: !state.toggleSort,\n  })),\n  on(SuggestionActions.setSortOption, (state, { option }) => ({\n    ...state,\n    currSortOption: option,\n  })),\n  on(SuggestionActions.setCategory, (state, { category }) => ({\n    ...state,\n    currCategory: category,\n  })),\n  on(SuggestionActions.storeCategoryCounts, (state, { counts }) => ({\n    ...state,\n    statusCounts: { ...counts },\n  }))\n)"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ],
            "src/app/features/suggestions/store/suggestions.selectors.ts": [
                {
                    "name": "selectCategories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSuggestionList,\n  (suggestions) => [\n    ...new Set(\n      suggestions.reduce(\n        (acc, curr) => {\n          acc.push(curr.category);\n          return acc;\n        },\n        ['all']\n      )\n    ),\n  ]\n)"
                },
                {
                    "name": "selectCurrCategory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSuggestions,\n  (state) => state.currCategory\n)"
                },
                {
                    "name": "selectCurrSortOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSuggestions,\n  (state) => state.currSortOption\n)"
                },
                {
                    "name": "selectStatusCounts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSuggestions,\n  (state) => state.statusCounts\n)"
                },
                {
                    "name": "selectSuggestionList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSuggestions,\n  (state) => state.suggestions\n)"
                },
                {
                    "name": "selectSuggestions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: fromApp.AppState) => state.suggestions"
                },
                {
                    "name": "selectToggleSort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/suggestions/store/suggestions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSuggestions,\n  (state) => state.toggleSort\n)"
                }
            ],
            "src/app/features/feedback/store/feedback.selectors.ts": [
                {
                    "name": "selectFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/feedback/store/feedback.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectFeedbackState,\n  (state) => state.feedback\n)"
                },
                {
                    "name": "selectFeedbackState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/feedback/store/feedback.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.feedbacks"
                }
            ],
            "src/app/features/roadmap/store/roadmap.selectors.ts": [
                {
                    "name": "selectFeedbacks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectRoadmapState,\n  (state) => state.feedbacks\n)"
                },
                {
                    "name": "selectLiveFeedbacks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectFeedbacks, (state) =>\n  state.filter((feedback) => feedback.status === 'live')\n)"
                },
                {
                    "name": "selectLiveFeedbacksCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectLiveFeedbacks,\n  (state) => state.length\n)"
                },
                {
                    "name": "selectPlannedFeedbacks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectFeedbacks, (state) =>\n  state.filter((feedback) => feedback.status === 'planned')\n)"
                },
                {
                    "name": "selectPlannedFeedbacksCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectPlannedFeedbacks,\n  (state) => state.length\n)"
                },
                {
                    "name": "selectProgressFeedbacks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectFeedbacks,\n  (state) => state.filter((feedback) => feedback.status === 'in-progress')\n)"
                },
                {
                    "name": "selectProgressFeedbacksCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectProgressFeedbacks,\n  (state) => state.length\n)"
                },
                {
                    "name": "selectRoadmapState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/roadmap/store/roadmap.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.roadmap"
                }
            ]
        },
        "groupedFunctions": {
            "src/libs/stencil-generated/angular-component-lib/utils.ts": [
                {
                    "name": "ProxyCmp",
                    "file": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "opts",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "opts",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/shared/components/comments/comments.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CommentsComponent>",
                    "file": "src/app/shared/components/comments/comments.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SortByDropdownComponent>",
                    "file": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/shared/components/upvote/upvote.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<UpvoteComponent>",
                    "file": "src/app/shared/components/upvote/upvote.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/core/models.ts": [
                {
                    "name": "SuggestionSortOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"most upvotes\" | \"least upvotes\" | \"most comments\" | \"least comments\"",
                    "file": "src/app/core/models.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "pathMatch": "full",
                        "redirectTo": "suggestions"
                    },
                    {
                        "path": "suggestions",
                        "loadComponent": "./features/suggestions/pages/suggestions/suggestions.component#SuggestionsComponent",
                        "component": "SuggestionsComponent"
                    },
                    {
                        "path": "roadmap",
                        "loadComponent": "./features/roadmap/pages/roadmap/roadmap.component#RoadmapComponent",
                        "component": "RoadmapComponent"
                    },
                    {
                        "path": "feedback",
                        "loadChildren": "./features/feedback/feedback-routing#FEEDBACK_ROUTES"
                    },
                    {
                        "path": "**",
                        "redirectTo": "suggestions"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "db",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Comment",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Feedback",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Reply",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/comment/comment.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommentService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/feedback/feedback.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FeedbackService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/reply/reply.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReplyService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/user/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/components/category-dropdown/category-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/feedback-routing.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FEEDBACK_ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/pages/create-feedback/create-feedback.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateFeedbackComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/pages/edit-feedback/edit-feedback.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditFeedbackComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/pages/feedback-detail/feedback-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeedbackDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/store/feedback.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/store/feedback.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/store/feedback.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetchFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/store/feedback.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storeFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/store/feedback.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/store/feedback.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FeedbackEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/store/feedback.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/store/feedback.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "feedbackReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/store/feedback.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/store/feedback.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/feedback/store/feedback.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFeedbackState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/components/feedback-card/feedback-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeedbackCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/pages/roadmap/roadmap.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RoadmapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetchFeedbacks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storeFeedbacks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoadmapEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "roadMapReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFeedbacks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLiveFeedbacks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLiveFeedbacksCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPlannedFeedbacks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPlannedFeedbacksCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProgressFeedbacks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProgressFeedbacksCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/roadmap/store/roadmap.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRoadmapState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/pages/suggestions/suggestions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SuggestionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetchCategoryCounts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetchSuggestions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setCategory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSortOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSuggestion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "startCreateSuggestion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "startEditSuggestion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storeCategoryCounts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "storeSuggestions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toggleSort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upvoteSuggestion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "viewRoadmap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "viewSuggestionDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SuggestionsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "suggestionsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCategories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrCategory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrSortOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStatusCounts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSuggestionList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSuggestions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/suggestions/store/suggestions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectToggleSort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/comments/comments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/comments/comments.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BigNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/comments/comments.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/comments/comments.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/comments/comments.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Normal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dropdown-tab/dropdown-tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/sort-by-dropdown/sort-by-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortByDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Closed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/sort-by-dropdown/sortDropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Open",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/upvote/upvote.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpvoteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/upvote/upvote.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/upvote/upvote.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Closed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/upvote/upvote.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/upvote/upvote.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/upvote/upvote.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Normal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/filter-by-category.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FilterByCategoryPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/sort-by.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SortByPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "goBack",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ProxyCmp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defineCustomElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "proxyInputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "proxyMethods",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/stencil-generated/angular-component-lib/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "proxyOutputs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/stencil-generated/proxies.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/libs/stencil-generated/proxies.ts",
                "type": "component",
                "linktype": "component",
                "name": "StencilButton",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            }
        ]
    }
}